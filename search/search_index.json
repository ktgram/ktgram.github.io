{"config":{"lang":["en","zh"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#intro","title":"Intro","text":"<p>Let's get an idea of how the library handles updates in general:</p> <p> </p> <p>After receiving an update, the library performs three main steps, as we can see.</p>"},{"location":"#processing","title":"Processing","text":"<p>Processing is to repackage the received update into the appropriate subclass of <code>ProcessedUpdate</code> depending on the payload being carried.</p> <p>This step is needed to make it easier to operate the update and to extend the processing capabilities.</p>"},{"location":"#handling","title":"Handling","text":"<p>Next comes the main step, here we get to the handling itself.</p>"},{"location":"#global-ratelimiter","title":"Global RateLimiter","text":"<p>If there is a user in the update, we check for exceeding the global rate limiter.</p>"},{"location":"#parse-text","title":"Parse text","text":"<p>Next, depending on the payload, we take a particular update component containing text and parse it according to the configuration.</p> <p>More detailed you can see in update parsing article.</p>"},{"location":"#find-activity","title":"Find Activity","text":"<p>Next, according to the processing priority:</p> <p> </p> <p>We are looking for a correspondence between the parsed data and the activities we are operating on. As we can see on the priority diagram, <code>Commands</code> always come first.</p> <p>I.e. if the text load in the update corresponds to any command, further search for <code>Inputs</code>, <code>Common</code> and of course execution of the <code>Unprocessed</code> action will not be performed.</p> <p>The only thing is that if there is a <code>UpdateHandlers</code> will be triggered in parallel regardless.</p>"},{"location":"#commands","title":"Commands","text":"<p>Let's take a closer look at the commands and their processing.</p> <p>As you may have noticed, although the annotation for processing commands is called <code>CommandHandler</code>, it is more versatile than the classic concept in Telegram Bots.</p>"},{"location":"#scopes","title":"Scopes","text":"<p>This is because it has a wider range of processing possibilities, i.e. the target function can be defined not only depending on the text match, but also on the type of a suitable update, this is the concept of scopes.</p> <p>Accordingly, each command can have different handlers for a different list of scopes, or vice versa, one command for several.</p> <p>Below you can see how mapping by text payload and scope is done:</p> <p> </p>"},{"location":"#inputs","title":"Inputs","text":"<p>Next, if the text payload does not match any command the input points are searched.</p> <p>The concept is very similar to input waiting in commandline applications, you put in the bot context for a particular user a point that will handle his next input, it doesn't matter what it contains, the main thing is that the next update has a <code>User</code> to be able to relate it to the set input waiting point.</p> <p>Below you can see an example of processing an update when there is no match on <code>Commands</code>.</p> <p> </p>"},{"location":"#commons","title":"Commons","text":"<p>If the handler finds no <code>commands</code> or <code>inputs</code>, it checks the text load against <code>common</code> handlers.</p> <p>We advise to use it without abuse, since it checks doing iteration over all entries.</p>"},{"location":"#unprocessed","title":"Unprocessed","text":"<p>And the final step, if the handler doesn't find any matching activity (<code>UpdateHandler</code> works completely in parallel and don't count as usual activity), then the <code>UnprocessedHandler</code> comes into play, if it is set, it will handle this case, it may be useful to warn the user that something has gone wrong.</p> <p>More detailed read in Handlers article.</p>"},{"location":"#activity-ratelimiter","title":"Activity RateLimiter","text":"<p>After finding an activity, it also checks the user's rate limits on it, according to the parameters specified in the activity parameters.</p>"},{"location":"#activity","title":"Activity","text":"<p>Activity refers to the different types of handlers the telegram bot library can handle, including Commands, Inputs, Regexes, and the Unprocessed handler.</p>"},{"location":"#invocation","title":"Invocation","text":"<p>The final processing step is the invocation of the found activity.</p> <p>More details can be found in the invocation article.</p>"},{"location":"#see-also","title":"See also","text":"<ul> <li>Update parsing</li> <li>Activity invocation</li> <li>Handlers</li> <li>Bot configuration</li> <li>Web starters (Spring, Ktor)</li> </ul>"},{"location":"Actions/","title":"Actions","text":""},{"location":"Actions/#all-requests-is-actions","title":"All requests is Actions","text":"<p>All telegram api requests are various kinds of <code>TgAction</code> interfaces that implementing different methods such as <code>SendMessageAction</code>, which have wrapped in the form of <code>message()</code> - type functions for the convenience of the library interface.</p> <p> </p> <p>Each <code>Action</code> may be able of having its own possible methods, depending on the available <code>Feature</code>.</p>"},{"location":"Actions/#features","title":"Features","text":"<p>Different actions may have different <code>Features</code> depending on the Telegram Bot Api, such as: <code>OptionsFeature</code>, <code>MarkupFeature</code> <code>EntitiesFeature</code> <code>CaptionFeature</code>.</p> <p>Let's take a closer look at them:</p>"},{"location":"Actions/#options","title":"Options","text":"<p>For example, <code>OptionsFeature</code> is used to pass optional parameters.</p> <p>Each action has its own type of options, the corresponding you can see in the <code>Action</code> itself in the <code>options</code> parameter, in properties section. For example, <code>sendMessage</code> which contains a <code>MessageOptions</code> data class with different parameters as options.</p> <p>Example usage:</p> <pre><code>message{ \"*Test*\" }.options {\n    parseMode = ParseMode.Markdown\n}.send(user, bot)\n</code></pre>"},{"location":"Actions/#markup","title":"Markup","text":"<p>There is also a method for sending markups that supports all kind of keyboards: <code>ReplyKeyboardMarkup</code>, <code>InlineKeyboardMarkup</code>, <code>ForceReply</code>, <code>ReplyKeyboardRemove</code>.</p>"},{"location":"Actions/#inline-keyboard-markup","title":"Inline Keyboard Markup","text":"<p>This builder allows you to construct inline buttons with any combination of parameters.</p> <pre><code>message{ \"Test\" }.inlineKeyboardMarkup {\n    \"name\" callback \"callbackData\"         //\n    \"buttonName\" url \"https://google.com\"  //--- these two buttons will be in the same row.\n    newLine() // or br()\n    \"otherButton\" webAppInfo \"data\"       // this will be in other row\n\n    // you can also use a different style within the builder:\n    callbackData(\"buttonName\") { \"callbackData\" }\n}.send(user, bot)\n</code></pre> <p>More details can be seen in the builder documentation.</p>"},{"location":"Actions/#reply-keyboard-markup","title":"Reply Keyboard Markup","text":"<p>This builder allows you to construct menu buttons.</p> <pre><code>message{ \"Test\" }.replyKeyboardMarkup {\n  + \"Menu button\"     // you can add buttons by using unary plus operator\n  + \"Menu button 2\"\n  br() // go to second row\n  \"Send polls \ud83d\udc40\" requestPoll true   // button with parameter\n\n  options {\n    resizeKeyboard = true\n  }\n}.send(user, bot)\n</code></pre> <p>Additional options applicable to the keyboard can be seen in <code>ReplyKeyboardMarkupOptions</code>.</p> <p>See the builder documentation for more details about the methods.</p> <p>It's mostly convenient to use dsl for collecting keyboard markup, but if needed, you can also add markup manually.</p> <pre><code>message{ \"*Test*\" }.markup {\n    InlineKeyboardMarkup(\n        InlineKeyboardButton(\"test\", callbackData = \"testCallback\")\n    )\n}.send(user, bot)\n</code></pre> <pre><code>message{ \"*Test*\" }.markup {\n    ReplyKeyboardMarkup(\n        KeyboardButton(\"Test menu button\")\n    )\n}.send(user, bot)\n</code></pre>"},{"location":"Actions/#entities","title":"Entities","text":"<p>There is also a method for sending <code>MessageEntity</code>.</p> <p>Example usage:</p> <pre><code>message{ \"Test \\$hello\" }.replyKeyboardMarkup {\n    +\"Test menu button\"\n}.entities {\n    5 to 15 url \"https://google.com\" // add TextLink\n    entity(EntityType.Bold, 0, 4)\n    entity(EntityType.Cashtag, 5, 5) // backslash doesn't count (because it's used for compiler)\n}.send(user, bot)\n</code></pre>"},{"location":"Actions/#contextual-entities","title":"Contextual entities.","text":"<p>Entities can also be added through the context of some constructs, they are labeled with a specific EntitiesContextBuilder interface, it is also present in the caption feature.</p> <p>Example usage:</p> <pre><code>message { \"usual text \" - bold { \"this is bold text\" } - \" continue usual\" }.send(user, bot)\n</code></pre> <p>All kinds of entity types are supported.</p>"},{"location":"Actions/#caption","title":"Caption","text":"<p>Also, the <code>caption</code> method can be used to add captions to media files.</p> <p>Example usage:</p> <pre><code>photo { \"FILE_ID\" }.caption { \"Test caption\" }.send(user, bot)\n</code></pre>"},{"location":"Actions/#see-also","title":"See also","text":"<ul> <li>Bot context</li> <li>FSM | Conversation handling</li> </ul>"},{"location":"Activites-and-Processors/","title":"Activites And Processors","text":""},{"location":"Activites-and-Processors/#introduction","title":"Introduction","text":"<p><code>Activity</code> in the terms of this library is the abstract entity that serves as concept that represents a generalization of entities such as <code>@CommandHandler</code>, <code>@InputHandler</code>, <code>@UnprocessedHandler</code>, and <code>@CommonHandler</code>.</p> <p>Also take a look at handlers article.</p>"},{"location":"Activites-and-Processors/#collecting-activities","title":"Collecting activities","text":"<p>Activities are collected and prepared all context in compile time.</p> <p>If you want to limit the area in which the package will be searched, you can pass a parameter to plugin:</p> <pre><code>ktGram {\n    packages = listOf(\"com.example.mybot\")\n}\n</code></pre> <p>or without plugin through ksp:</p> <pre><code>ksp {\n    arg(\"package\", \"com.example.mybot\")\n}\n</code></pre> <p>note in such a case, in order for the collected actions to be processed correctly, you must also specify the package in the instance itself.</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\", \"com.example.mybot\")\n\n    bot.handleUpdates()\n    // start long-polling listener\n}\n</code></pre> <p>this option is added to be able to run multiple bot instances:</p> <pre><code>ktGram {\n    packages = listOf(\"com.example.mybot\", \"com.example.mybot2\")\n}\n</code></pre> <p>or if you're not using plugin to specify different packages you need to specify them with <code>;</code> separator:</p> <pre><code>ksp {\n    arg(\"package\", \"com.example.mybot;com.example.mybot2\")\n}\n</code></pre>"},{"location":"Activites-and-Processors/#processors","title":"Processors","text":"<p>You have two types of flow processing updates:</p>"},{"location":"Activites-and-Processors/#functional","title":"Functional","text":"<p>You establish the processing behavior through the lambda parameter function <code>bot.handleUpdates() {}</code>, or through <code>bot.update.setListener</code>.</p> <p>You can read more about  functional processing in a related article.</p> <p>See <code>FunctionalHandlingDsl</code>.</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates {\n         onMessage {\n             message { update.text }.send(update.user, bot)\n         }\n   }\n}\n</code></pre>"},{"location":"Activites-and-Processors/#annotation","title":"Annotation","text":"<p>Annotation depends on the selected processing mode: </p>"},{"location":"Activites-and-Processors/#webhooks","title":"Webhooks","text":"<p>In your controller (or another place where the <code>webhook</code> is processed), you call: <code>bot.update.parseAndHandle(webhookString)</code></p> <p>By default it will use processor for annotations, but if you want to have some custom behaviour it also can be set through <code>setBehaviour</code> (it is not necessary to assign the behavior in the controller itself every time, it is enough to assign it once during configuration):</p> <pre><code>bot.update.setBehaviour {\n   // ...any other actions\n   update(it) // run annotation processor\n}\n</code></pre>"},{"location":"Activites-and-Processors/#long-polling","title":"Long polling","text":"<p>Call: <code>bot.handleUpdates()</code> or through <code>bot.update.setListener { handle(it) }</code></p>"},{"location":"Activites-and-Processors/#both","title":"Both","text":"<p>Also, if desired, both these approaches can be combined using the same <code>setListener {}</code>, in such an approach even the same command can be processed twice, processing will be done in the order they are called.</p> <p><pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\", \"eu.vendeli.samples.controller\")\n\n    bot.update.setListener {\n        handle(it) // Here we send the update for annotation processing.\n        handle(it) { // Here we functionally process it afterwards.\n            onMessage {\n                message { update.text }.send(update.user, bot)\n            }\n        }\n   }\n}\n</code></pre> Example of combining usage you can see in a poll sample.</p> <p>or in webhook handling you can set through <code>setBehaviour</code> as described before.</p>"},{"location":"Activites-and-Processors/#see-also","title":"See also","text":"<ul> <li>Update parsing</li> <li>Activity invocation</li> <li>Actions</li> </ul>"},{"location":"Activity-invocation/","title":"Activity Invocation","text":"<p>During activity invocation, it is possible to pass the bot context, as it is declared as a parameter in target functions. </p> <p>The parameters that can be passed are: </p> <ul> <li><code>ProcessedUpdate</code> (and all its subclasses) - current processing update.</li> <li><code>User</code> - if present.</li> <li><code>Chat</code> - if present.</li> <li><code>TelegramBot</code> - current bot instance. </li> </ul> <p>It is also possible to add a custom type for passing. </p> <p>To do this, add a class that implements <code>Autowiring&lt;T&gt;</code> and mark it with the <code>@Injectable</code> annotation. </p> <p>After implementing the <code>Autowiring</code> interface - <code>T</code> will be available for passing in target functions and will be obtained through the method described in the interface. </p> <pre><code>@Injectable\nobject UserResolver : Autowiring&lt;UserRecord&gt; {\n    override suspend fun get(update: ProcessedUpdate, bot: TelegramBot): UserRecord? {\n        return userRepository.getUserByTgId(update.user.id)\n    }\n}\n</code></pre> <p>Other parameters declared in functions will be searched in parsed parameters. </p> <p>Additionally, parsed parameters during passing can be cast to certain types, here is their list: </p> <ul> <li><code>String</code></li> <li><code>Integer</code></li> <li><code>Long</code></li> <li><code>Short</code></li> <li><code>Float</code></li> <li><code>Double</code></li> </ul> <p>Moreover, note that if parameters are declared and missing (or in parsed parameters or for example <code>User</code> is missing in <code>Update</code>) or the declared type does not fit the received parameter in the function, <code>null</code> will be passed so be careful.</p> <p>Summarizing everything, below here is an example of how function parameters are usually formed:</p> <p> </p>"},{"location":"Activity-invocation/#see-also","title":"See also","text":"<ul> <li>Update parsing</li> <li>Activities &amp; Processors</li> <li>Aide</li> </ul>"},{"location":"Aide/","title":"Aide","text":""},{"location":"Aide/#aide-compiler-plugin","title":"###################################### Aide Compiler Plugin [\ud83d\udd2c]","text":"<p>feature disabled by default, to use it enable in plugin parameters</p>"},{"location":"Aide/#configuration","title":"###################################### Configuration","text":"<p>Configure Aide in your <code>build.gradle.kts</code>:</p> <pre><code>ktGram {\n    // Enable AIDE compiler extensions (Automatic .send() chaining)\n    aideEnabled = true\n\n}\n</code></pre>"},{"location":"Aide/#usage-example","title":"###################################### Usage Example","text":""},{"location":"Aide/#simple-case","title":"######################################## Simple case","text":"<pre><code>@CommandHandler\nsuspend fun handler(user: User, bot: TelegramBot) {\n    // With aideAutoSend=true\n    message {\n        \"Auto-sent message\"\n    } // \u2190 Compiler adds .send(user, bot)\n\n    // Explicit control\n    message { \n        \"Manual send\"\n    }.send(user, bot) // \u2190 No auto-add when present\n}\n</code></pre> <p>Caution</p> <p>Be aware that even if you do not use an explicit <code>send</code>, you still need to have <code>suspend</code> function keyword, otherwise you will get an error.</p>"},{"location":"Aide/#complex-case-manual-handling-required","title":"######################################## Complex Case (Manual Handling Required)","text":"<pre><code>@InputHandler\nfun handleInput(user: User, bot: TelegramBot) {\n    // Requires manual .send()\n    val savedAction = message {\n        \"Stored action\"\n    }\n\n    // Valid usage with explicit send\n    savedAction.send(user, bot)\n}\n</code></pre>"},{"location":"Aide/#validation-rules","title":"######################################### Validation Rules","text":"<ul> <li> <p>Auto-Send Applies When:</p> <ul> <li>Action is directly returned from handler</li> <li>No intermediate variable assignment</li> <li>No existing <code>.send()</code> call</li> </ul> </li> </ul>"},{"location":"Aide/#feature-behavior","title":"###################################### Feature Behavior","text":""},{"location":"Aide/#when-aideenabledtrue","title":"####################################### When <code>aideEnabled=true</code>","text":"<pre><code>graph TD\n    A[Detect Action] --&gt; B{Simple Call?}\n    B --&gt;|Yes| C{Has Send?}\n    B --&gt;|No| D[No send]\n    C --&gt;|No| E[Add Send]\n    C --&gt;|Yes| F[Keep]\n    D --&gt; G[Skip]\n</code></pre>"},{"location":"Aide/#requirements","title":"####################################### Requirements","text":"<ul> <li>Handler must declare parameters:</li> <li><code>User</code> for general actions (simple action require just <code>TelegramBot</code>)</li> <li><code>TelegramBot</code> for all actions</li> <li>Annotated with <code>@CommandHandler</code>, <code>@InputHandler</code>, etc (any supported annotation).</li> </ul>"},{"location":"Bot-Context/","title":"Bot Context","text":"<p>The bot can also provide the ability to remember some data through the <code>UserData</code> and <code>ClassData</code> interfaces.</p> <ul> <li><code>userData</code> is a user-level data.</li> <li><code>classData</code> is a class-level data, i.e. the data will be stored until the user moves to a command or input that is in a   different class. (in function mode it will work like as user data)</li> </ul> <p>By default, implementation is provided through <code>ConcurrentHashMap</code> but can be changed to your own through <code>UserData</code> and <code>ClassData</code> interfaces using the data storage tools of your choice.</p> <p>Caution</p> <p>Don't forget to hit gradle <code>kspKotlin</code>/or any relevant ksp task to make required codegen bindings available.</p> <p>To change, all you need to do is put under your implementation <code>@CtxProvider</code> annotation and run gradle ksp task (or build).</p> <pre><code>@CtxProvider\nclass MyRedis : UserData&lt;String&gt; {\n    // ...\n}\n</code></pre>"},{"location":"Bot-Context/#see-also","title":"See also","text":"<ul> <li>Home</li> <li>Update parsing</li> </ul>"},{"location":"Bot-configuration/","title":"Bot Configuration","text":"<p>Library provides plenty of configuration options, you can see api reference in the <code>BotConfiguration</code> class description.</p> <p>There are also two approaches to configuring the bot:</p>"},{"location":"Bot-configuration/#configurator-lambda","title":"Configurator lambda","text":"<pre><code>// ...\nval bot = TelegramBot(\"BOT_TOKEN\") {\n  inputListener = RedisInputListenerImpl()\n  classManager = KoinClassManagerImpl()\n  logging {\n      botLogLevel = LogLvl.DEBUG\n  }\n}\n// ...\n</code></pre>"},{"location":"Bot-configuration/#configloader-interface","title":"ConfigLoader interface","text":"<p>There is also the ability to configure through a special <code>ConfigLoader</code> interface, which you can use to load settings from external sources (<code>properties</code>, <code>command line args</code>, etc.).</p> <p>The implementation of this interface can be passed through a secondary constructor and the instance will be configured accordingly.</p> <pre><code>val bot = TelegramBot(ConfigLoaderImpl)\n</code></pre> <p>Currently there's several modules provided that implements this interface like <code>ktgram-config-env</code>, <code>ktgram-config-toml</code>.</p>"},{"location":"Bot-configuration/#botconfiguration-overview","title":"BotConfiguration Overview","text":""},{"location":"Bot-configuration/#botconfiguration","title":"BotConfiguration","text":"<p>The <code>BotConfiguration</code> class is the central hub for configuring a bot. It includes properties for identifying the bot, setting up the API host, determining whether the bot operates in a test environment, handling inputs, managing classes, and controlling input auto-removal. Additionally, it provides internal properties for rate limiting, HTTP client configuration, logging, update listening, and command parsing.</p>"},{"location":"Bot-configuration/#properties","title":"Properties","text":"<ul> <li><code>identifier</code>: Identifies different bot instances during multi-bot processing.</li> <li><code>apiHost</code>: Host of the Telegram API.</li> <li><code>isTestEnv</code>: Flag indicating whether the bot operates in a test environment.</li> <li><code>inputListener</code>: Instance of the input handling class.</li> <li><code>classManager</code>: Manager used to get classes.</li> <li><code>inputAutoRemoval</code>: Flag regulating the auto-deletion of the input point during processing.</li> <li><code>exceptionHandlingStrategy</code>: Defines the strategy for handling exceptions.<ul> <li><code>CollectToChannel</code> - Collect to <code>TgUpdateHandler.caughtExceptions</code>.</li> <li><code>Throw</code> - Throw again wrapped with <code>TgException</code>.</li> <li><code>DoNothing</code> - Do nothing :)</li> <li><code>Handle</code> - Set custom handler.</li> </ul> </li> <li><code>throwExOnActionsFailure</code>: Throws an exception when any bot request fails.</li> </ul>"},{"location":"Bot-configuration/#configuration-blocks","title":"Configuration Blocks","text":"<p><code>BotConfiguration</code> also offers functions to configure its internal components:</p> <ul> <li><code>httpClient(block: HttpConfiguration.() -&gt; Unit)</code>: Configures the HTTP client.</li> <li><code>logging(block: LoggingConfiguration.() -&gt; Unit)</code>: Configures logging.</li> <li><code>rateLimiter(block: RateLimiterConfiguration.() -&gt; Unit)</code>: Configures request limiting.</li> <li><code>updatesListener(block: UpdatesListenerConfiguration.() -&gt; Unit)</code>: Configures the updates listener.</li> <li><code>commandParsing(block: CommandParsingConfiguration.() -&gt; Unit)</code>: Specifies command parsing pattern.</li> </ul>"},{"location":"Bot-configuration/#associated-configuration-classes","title":"Associated Configuration Classes","text":""},{"location":"Bot-configuration/#ratelimiterconfiguration","title":"RateLimiterConfiguration","text":"<p>Configures global rate limiting.</p> <ul> <li><code>limits</code>: Global rate limits.</li> <li><code>mechanism</code>: Mechanism used for rate limiting, default is TokenBucket algorithm.</li> <li><code>exceededAction</code>: Action applied when the limit is exceeded.</li> </ul>"},{"location":"Bot-configuration/#httpconfiguration","title":"HttpConfiguration","text":"<p>Contains configuration for the bot's HTTP client.</p> <ul> <li><code>requestTimeoutMillis</code>: Request timeout in milliseconds.</li> <li><code>connectTimeoutMillis</code>: Connection timeout in milliseconds.</li> <li><code>socketTimeoutMillis</code>: Socket timeout in milliseconds.</li> <li><code>maxRequestRetry</code>: Maximum retry for HTTP requests.</li> <li><code>retryStrategy</code>: Strategy for retries, customizable.</li> <li><code>retryDelay</code>: Multiplier for timeout at each retry.</li> <li><code>proxy</code>: Proxy settings for HTTP calls.</li> <li><code>additionalHeaders</code>: Headers applied to every request.</li> </ul>"},{"location":"Bot-configuration/#loggingconfiguration","title":"LoggingConfiguration","text":"<p>Manages logging levels for bot actions and HTTP requests.</p> <ul> <li><code>botLogLevel</code>: Level of logs for bot actions.</li> <li><code>httpLogLevel</code>: Level of logs for HTTP requests.</li> </ul>"},{"location":"Bot-configuration/#updateslistenerconfiguration","title":"UpdatesListenerConfiguration","text":"<p>Configures parameters related to pulling updates.</p> <ul> <li><code>dispatcher</code>: Dispatcher for collecting incoming updates.</li> <li><code>processingDispatcher</code>: Dispatcher for processing updates.</li> <li><code>pullingDelay</code>: Delay after each pulling request.</li> <li><code>updatesPollingTimeout</code>: Timeout option for long-polling mechanism.</li> </ul>"},{"location":"Bot-configuration/#commandparsingconfiguration","title":"CommandParsingConfiguration","text":"<p>Specifies parameters for command parsing.</p> <ul> <li><code>commandDelimiter</code>: Separator between command and parameters.</li> <li><code>parametersDelimiter</code>: Separator between parameters.</li> <li><code>parameterValueDelimiter</code>: Separator between key and value of parameter.</li> <li><code>restrictSpacesInCommands</code>: Flag indicating if spaces in commands should be treated as the end of the command.</li> <li><code>useIdentifierInGroupCommands</code>: Uses bot's identifier to match commands containing @.</li> </ul>"},{"location":"Bot-configuration/#example-configuration","title":"Example Configuration","text":"<p>Here's an example of how to configure a bot using these classes:</p> <pre><code>val bot = TelegramBot(\"TOKEN\") {\n    identifier = \"MyBot\",\n    apiHost = \"https://api.telegram.org\",\n    isTestEnv = true,\n    inputListener = InputListenerMapImpl(),\n    classManager = ClassManagerImpl(),\n\n    httpClient {\n        requestTimeoutMillis = 5000L\n        connectTimeoutMillis = 3000L\n        socketTimeoutMillis = 2000L\n    }\n    logging {\n        botLogLevel = LogLvl.DEBUG\n        httpLogLevel = HttpLogLevel.BODY\n    }\n    updatesListener {\n        dispatcher = Dispatchers.IO\n        processingDispatcher = Dispatchers.Unconfined\n        pullingDelay = 1000L\n    }\n    commandParsing {\n        commandDelimiter = '*'\n        parametersDelimiter = '&amp;'\n        restrictSpacesInCommands = true\n    }\n}\n</code></pre> <p>This configuration sets up a bot with specific identifiers, enables test environment mode, configures rate limiting, HTTP client settings, logging levels, update listener parameters, and command parsing rules.</p> <p>By leveraging these configuration options, developers can fine-tune their bots to meet specific requirements and optimize performance across various operational scenarios.</p>"},{"location":"F.A.Q/","title":"F.A.Q","text":""},{"location":"F.A.Q/#abstractmethoderror-exception","title":"<code>AbstractMethodError</code> exception","text":"<p>If you getting such exception on the startup of your application:</p> <pre><code>Exception in thread \"DefaultDispatcher-worker-1\" java.lang.AbstractMethodError: 'kotlinx.serialization.KSerializer[] kotlinx.serialization.internal.GeneratedSerializer.typeParametersSerializers()'\n    at eu.vendeli.tgbot.types.options.GetUpdatesOptions$$serializer.typeParametersSerializers(GetUpdatesOptions.kt:6)\n</code></pre> <p>It happening because your build system resolving old serialization library which internal mechanics differs. To solve it you should make it use more newer version, for example by adding this to your buildscript:</p> <pre><code>configurations.all {\n    resolutionStrategy.eachDependency {\n        val serdeVer = \"x.x.x\" // should be &gt;= 1.8.0\n        when(requested.module.toString()) {\n            // json serialiazaton\n            \"org.jetbrains.kotlinx:kotlinx-serialization-json\" -&gt; useVersion(serdeVer)\n            \"org.jetbrains.kotlinx:kotlinx-serialization-json-jvm\" -&gt; useVersion(serdeVer)\n            \"org.jetbrains.kotlinx:kotlinx-serialization-core\" -&gt; useVersion(serdeVer)\n            \"org.jetbrains.kotlinx:kotlinx-serialization-core-jvm\" -&gt; useVersion(serdeVer)\n            \"org.jetbrains.kotlinx:kotlinx-serialization-bom\" -&gt; useVersion(serdeVer)\n        }\n    }\n}\n</code></pre> <p>(If it was well described in changelog I would never upgraded it bc I getting so much reports on this issue)</p>"},{"location":"F.A.Q/#how-do-i-get-the-methods-response","title":"How do I get the method's response?","text":"<p>To get a response and be able to operate over, you need to use <code>sendReturning</code> at the end of the method instead of <code>send</code>.</p> <p>In this case the <code>Response</code> class is returned, which contains the response, success or failure, further you need to either handle the failure or just call <code>getOrNull()</code>.</p> <p>There's section about: Processing responses.</p>"},{"location":"F.A.Q/#im-getting-error-while-using-spring-boot-devtools","title":"I'm getting error while using <code>spring-boot-devtools</code>","text":"<p>This happens because <code>spring-boot-devtools</code> has its own <code>classloader</code> and it does not find methods.</p> <p>You need to add to <code>resources/META-INF/spring-devtools.properties</code>:</p> <pre><code>restart.include.generated=/eu.vendeli\n</code></pre>"},{"location":"F.A.Q/#how-to-change-ktor-engine","title":"How to change ktor engine","text":"<p>If you want to change the engine used by the client you can simply change the parameter in the plugin settings.</p>"},{"location":"F.A.Q/#how-to-use-my-favorite-logging-provider","title":"How to use my favorite logging provider","text":"<p>The library uses <code>slf4j-api</code> and to use the provider you just need to add it to the dependencies.</p> <p>The library plugin automatically detects the use of the provider, if provider is missing, <code>logback</code> will be used by default.</p>"},{"location":"F.A.Q/#catch-network-exceptions-within-long-polling-handler","title":"Catch network exceptions within long-polling handler","text":"<p>For example if you have an unstable connection and need to catch an error because of this, perhaps this approach will help you:</p> <pre><code>fun main() {\n    val bot = TelegramBot(\"TOKEN\")\n\n    try {\n        bot.handleUpdates()\n    } catch (e: Exception) {\n        // handle if needed\n\n        bot.update.stopListener()\n        bot.handleUpdates()\n    }\n}\n</code></pre> <p>Also you can take a look how it's done in spring-starter.</p>"},{"location":"FSM-and-Conversation-handling/","title":"Fsm And Conversation Handling","text":"<p>The library also supports the FSM mechanism, which is a mechanism for progressive processing of user input with incorrect input handling.</p>"},{"location":"FSM-and-Conversation-handling/#in-theory","title":"In theory","text":"<p>Let's imagine a situation where you need to collect a user survey, you can ask for all the data of a person at one step, but with incorrect input of one of the parameters, it will be difficult both for the user and for us, and each step may have a difference depending on certain input data.</p> <p>Now let's imagine step-by-step input of data, where the bot enters dialogue mode with the user.</p> <p> </p> <p>Green arrows indicate the process of transitioning through steps without errors, blue arrows mean saving the current state and waiting for re-input (for example, if the user indicated that he is -100 years old, it should ask for age again), and red ones show exit from the entire process due to any command or any other meaning cancellation.</p>"},{"location":"FSM-and-Conversation-handling/#in-practice","title":"In practice","text":"<p>Such a mechanism can be implemented in the library through a simple class that implements a certain interface and marked with a specific annotation <code>@InputChain</code>.</p> <pre><code>@InputChain\nobject ConversationChain {\n    object Name : BaseStatefulLink() {\n        override val breakCondition = BreakCondition { _, update, _ -&gt; update.text.isBlank() }\n        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {\n            message {\n                \"Please say your name, because that's what well-mannered people do :)\"\n            }.send(user, bot)\n        }\n\n        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {\n            message { \"Oh, ${update.text}, hey there\" }.send(user, bot)\n            message { \"How old are you?\" }.send(user, bot)\n\n            return update.text\n        }\n    }\n\n    object Age : BaseStatefulLink() {\n        override val breakCondition = BreakCondition { _, update, _ -&gt; update.text.toIntOrNull() == null }\n        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {\n            message {\n                \"Perhaps it's not nice to ask your age, but maybe you can tell me anyway.\"\n            }.send(user, bot)\n        }\n\n        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {\n            message { \"Pleased to meet you!\" }.send(user, bot)\n\n            return update.text\n        }\n    }\n\n    object Final : ChainLink() {\n        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot) {\n            val state = user.getAllState(ConversationChain)\n\n            message {\n                \"I'm not good at remembering, but I remembered you! \" +\n                        \"You're ${state.Name} and you're ${state.Age} years old.\"\n            }.send(user, bot)\n        }\n    }\n}\n</code></pre> <p>And after we described the mechanism to start the processing, we just need to call the method and specify the initial step, then the library itself will follow the sequence.</p> <pre><code>bot.inputListener.setChain(user, Conversation.Name)\n</code></pre>"},{"location":"FSM-and-Conversation-handling/#links-details","title":"Links details","text":"<p>All links have the same foundation and implementing <code>Link&lt;T&gt;</code> interface, which have such properties:</p> <p>Key Properties:</p> <ul> <li>afterAction: An optional action to execute after the main action.</li> <li>beforeAction: An optional action to execute before the main action.</li> <li>breakCondition: A condition that, if met, will trigger a break in the chain.</li> <li>chainingStrategy: Defines how the next link is determined.</li> <li>retryAfterBreak: Indicates whether to retry the action after a break condition is met.</li> </ul> <p>Key Functions:</p> <ul> <li>action: This is an abstract function that must be implemented to define the primary behavior of the link.</li> <li>breakAction: An optional function that can be overridden to define behavior when a break condition is met.</li> </ul> <p>There are two types of links they are differentiated by state, stateless and stateful:</p>"},{"location":"FSM-and-Conversation-handling/#stateless-links","title":"Stateless Links","text":"<p>Stateless links are represented by the abstract class <code>ChainLink</code>. This class serves as the foundation for creating links that do not maintain any state information between user interactions.</p>"},{"location":"FSM-and-Conversation-handling/#stateful-links","title":"Stateful Links","text":"<p>The <code>InputChain</code> mechanism, particularly when employing <code>StatefulLink</code> and its various implementations, offers a sophisticated approach to managing conversational states within applications, such as chatbots. This system automatically stores the result of the <code>action</code> function associated with each state, linking it directly to the user involved in the interaction (or other selected key).</p>"},{"location":"FSM-and-Conversation-handling/#key-features","title":"Key Features","text":""},{"location":"FSM-and-Conversation-handling/#automatic-state-storage","title":"Automatic State Storage","text":"<ul> <li>By default, the outcome of the <code>action</code> function executed within a <code>StatefulLink</code> is automatically stored. This storage is linked to the user, ensuring personalized interactions based on past exchanges.</li> </ul>"},{"location":"FSM-and-Conversation-handling/#customizable-keys","title":"Customizable Keys","text":"<ul> <li>Developers have the flexibility to override the base implementation to specify custom keys for state association. This could range from identifiers unique to a chat session to any other relevant attribute that suits the application's requirements.</li> </ul>"},{"location":"FSM-and-Conversation-handling/#data-typing-and-key-utilization","title":"Data Typing and Key Utilization","text":"<ul> <li>The foundational implementation, <code>BaseStatefulLink</code>, categorizes data as <code>String</code> types, utilizing <code>User.id</code> as the primary key for state association. This approach streamlines data management and retrieval processes.</li> </ul>"},{"location":"FSM-and-Conversation-handling/#unified-access-to-states","title":"Unified Access to States","text":"<ul> <li>Should all <code>Link</code> objects within the InputChain utilize identical keys, the system generates functions that facilitate unified access to all states. This enhancement significantly simplifies the process of retrieving and managing state information across different parts of the application.</li> </ul>"},{"location":"FSM-and-Conversation-handling/#usage-examples","title":"Usage Examples","text":""},{"location":"FSM-and-Conversation-handling/#retrieving-all-states","title":"Retrieving All States","text":"<p>To access all states associated with a particular chain for a given user, the following syntax can be employed: <pre><code>user.getAllState(MyChain).LinkName\n</code></pre> This command retrieves the data linked to the specified <code>LinkName</code> within <code>MyChain</code>, providing a comprehensive overview of the user's interaction history.</p>"},{"location":"FSM-and-Conversation-handling/#direct-state-access","title":"Direct State Access","text":"<p>Alternatively, for more granular control, states can be accessed directly through the links themselves: <pre><code>Chain.LinkName.state.get(key)\n</code></pre> Or, if querying the state within the current chain, <code>Chain.LinkName</code> may be omitted, simplifying the call to: <pre><code>state.get(key)\n</code></pre></p>"},{"location":"FSM-and-Conversation-handling/#benefits","title":"Benefits","text":"<p>This methodology enables stricter data management protocols, offering rapid and convenient access to stored states. It enhances the efficiency of state retrieval and manipulation, contributing to a more seamless user experience.</p> <p>Default <code>BaseStatefulLink</code> implementation uses <code>ConcurrentHashMap</code>, but for serious projects it is recommended to use other solutions :)</p>"},{"location":"FSM-and-Conversation-handling/#summarizing","title":"Summarizing","text":"<p>It is possible to use the proposed tools with different variations to create quite flexible interaction, if you have any questions contact us in chat, we will be glad to help :)</p>"},{"location":"Functional-DSL/","title":"Functional Dsl","text":""},{"location":"Functional-DSL/#to-infinity-functional-handling-and-beyond","title":"To ~~infinity~~ functional handling and beyond!","text":"<p>Although the basic mechanism of working with the bot involves working with annotations, but nevertheless it does not prevent the use of functional update processing.</p> <p>Moreover, the flexibility of the bot interface also allows you to combine the two modes.</p>"},{"location":"Functional-DSL/#functional-handling-dsl","title":"Functional handling DSL","text":"<p>In most functional processing methods differ in the types of <code>Update</code> supported, in simple terms you can put a listener on a certain type of data.</p> <p>By way of example:</p> <pre><code>suspend fun main() {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates() {\n        onChosenInlineResult {\n            println(\"got a result ${update.chosenInlineResult.resultId} from ${update.user}\")\n        }\n    }\n}\n</code></pre>"},{"location":"Functional-DSL/#commands-and-inputs","title":"Commands and Inputs","text":"<p>It is also possible to process both <code>commands</code> and <code>inputs</code>.</p> <p>See example:</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates() {\n            // regular command\n        onCommand(\"/start\") {\n            message { \"Hello\" }.send(user, bot)\n        }\n        onCommand(\"\"\"(red|green|blue)\"\"\".toRegex()) {\n            message { \"you typed ${update.text} color\" }.send(user, bot)\n        }\n    }\n}\n</code></pre> <p>In the context of the <code>onCommand</code> function, parameters in the format <code>Map&lt;String, String&gt;</code> are passed, parsed appropriately specified in configuration. </p>"},{"location":"Functional-DSL/#inputs","title":"Inputs","text":"<p>It is also possible to use inputs through the familiar <code>bot.inputListener</code> mechanism.</p> <p><pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates() {\n            // regular command\n        onCommand(\"/start\") {\n            message { \"Hello, what's your name?\" }.send(user, bot)\n            bot.inputListener[user] = \"testInput\"\n        }\n        onInput(\"testInput\") {\n            message { \"Hey, nice to meet you, ${update.text}\" }.send(user, bot)\n        }\n    }\n}\n</code></pre> Also, you can use input chaining: <pre><code>inputChain(\"conversation\") {\n     message { \"Nice to meet you, ${update.text}\" }.send(user, bot)\n     message { \"What is your favorite food?\" }.send(user, bot)\n}.breakIf({ update.text == \"peanut butter\" }) { // chain break condition\n     message { \"Oh, too bad, I'm allergic to it.\" }.send(user, bot)\n     // action that will be applied when match\n}.andThen {\n     // next input point if break condition doesn't match\n}\n</code></pre></p> <p>You can read more about methods in the <code>FunctionalHandlingDsl</code> class documentation.</p> <p>Caution</p> <p>Be aware that if you use both processors (functional, annotation) inputs may work not as it seems to be (each processor clears input after being processed, if you want another behavior change inputAutoRemoval configuration).</p>"},{"location":"Functional-DSL/#see-also","title":"See also","text":"<ul> <li>Action</li> <li>Useful utilities</li> </ul>"},{"location":"Guards/","title":"Guards","text":""},{"location":"Guards/#introduction","title":"Introduction","text":"<p>Guards are an essential feature for developers creating bots. These guards function as pre-execution checks that determine whether a particular command should be invoked. By implementing these checks, developers can enhance the functionality, security, and user experience of their bots.</p>"},{"location":"Guards/#purpose-of-activity-guards","title":"Purpose of Activity Guards","text":"<p>The primary purpose of activity guards is to ensure that only authorized users or specific conditions trigger a activity. </p> <p>This can prevent misuse, maintain the bot's integrity, and streamline interactions.</p>"},{"location":"Guards/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Authentication and Authorization: Ensuring only certain users can access specific commands.</li> <li>Pre-condition Checks: Verifying that certain conditions are met before executing a activity (e.g., ensuring a user is in a particular state or context).</li> <li>Contextual Guards: Making decisions based on the current chat or user state.</li> </ol>"},{"location":"Guards/#implementation-strategies","title":"Implementation Strategies","text":"<p>Implementing Telegram Command Guards typically involves writing functions or methods that encapsulate the logic for each guard. Below are common strategies:</p> <ol> <li>User Role Check:</li> <li> <p>Ensuring the user has the required role (e.g., admin, moderator) before executing the command.       <pre><code> override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n  // Check if the user is an admin in the given chat\n }\n</code></pre></p> </li> <li> <p>State Verification:</p> </li> <li> <p>Checking the user's state before allowing command execution.      <pre><code>override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n   return bot.userData[user.id, \"data\"] == requiredState\n}\n</code></pre></p> </li> <li> <p>Custom Guards:</p> </li> <li>Creating custom logic based on specific requirements.      <pre><code>override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n   // Custom logic to determine if the command should be executed\n}\n</code></pre></li> </ol>"},{"location":"Guards/#integrating-guards-with-activities","title":"Integrating Guards with Activities","text":"<p>To integrate these guards with your bot commands, you can create a guard that checks these conditions before the command handler is invoked.</p>"},{"location":"Guards/#implementing-example","title":"Implementing Example","text":"<pre><code>// define somewhere your guard class that implements Guard interface\nobject YourGuard : Guard {\n    override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n        // write your condition here\n    }\n}\n\n// ...\n\n@CommandHandler([\"yourCommand\"])\n@Guard(YourGuard::class) // InputHandler also is supported\nfun command(bot: TelegramBot) {\n   // command body\n}\n</code></pre>"},{"location":"Guards/#best-practices","title":"Best Practices","text":"<ul> <li>Modularity: Keep guard logic modular and separate from activities.</li> <li>Reusability: Write reusable guard functions that can be easily applied across different commands/inputs.</li> <li>Efficiency: Optimize guard checks to minimize performance overhead.</li> <li>User Feedback: Provide clear feedback to users when a command is blocked by a guard.</li> </ul>"},{"location":"Guards/#conclusion","title":"Conclusion","text":"<p>Activity Guards are a powerful tool for managing bot command/input execution. </p> <p>By implementing robust guard mechanisms, developers can ensure their bots operate securely and efficiently, providing a better user experience.</p>"},{"location":"Guards/#see-also","title":"See also","text":"<ul> <li>Activities and Proccessors</li> <li>Update parsing</li> <li>Actions</li> <li>Activity invocation</li> </ul>"},{"location":"Handlers/","title":"Handlers","text":""},{"location":"Handlers/#variety-of-handlers","title":"Variety of Handlers","text":"<p>In bot development, particularly in systems involving user interactions, it is crucial to manage and process commands and events efficiently.</p> <p>These annotations mark functions designed to process specific commands, inputs, or updates and provide metadata such as command keywords, scopes, and guards.</p>"},{"location":"Handlers/#annotations-overview","title":"Annotations Overview","text":""},{"location":"Handlers/#commandhandler","title":"CommandHandler","text":"<p>The <code>CommandHandler</code> annotation is used to mark functions that process specific commands. This annotation includes properties that define the command's keywords and scopes.</p> <ul> <li>value: Specifies the keywords associated with the command.</li> <li>scope: Determines the context or scope in which the command will be checked.</li> </ul> <pre><code>@CommandHandler([\"text\"])\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#commandhandlercallbackquery","title":"CommandHandler.CallbackQuery","text":"<p>A specialized version of the <code>CommandHandler</code> annotation designed specifically for handling callback queries. It includes similar properties as <code>CommandHandler</code>, with a focus on callback-related commands.</p> <p>It's actually the same as just <code>@CommandHandler</code> with a preset <code>UpdateType.CALLBACK_QUERY</code> scope.</p> <ul> <li>value: Specifies the keywords associated with the command.</li> <li>autoAnswer: Reply to <code>callbackQuery</code> automatically (call <code>answerCallbackQuery</code> before handling).</li> </ul> <pre><code>@CommandHandler.CallbackQuery([\"text\"])\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#commonhandler","title":"CommonHandler","text":"<p>The <code>CommonHandler</code> annotation is intended for functions that process commands with lower priority compared to <code>CommandHandler</code> and <code>InputHandler</code>. It is used at the source level and provides a flexible way to define common command handlers.</p> <p>Be aware, priority works within just <code>@CommonHandler</code>'s itself  (ie. not affects other handlers).</p>"},{"location":"Handlers/#commonhandlertext","title":"CommonHandler.Text","text":"<p>This annotation specifies text matching against updates. It includes properties to define the matching text, filtering conditions, priority, and scope.</p> <ul> <li>value: The text to match against incoming updates.</li> <li>filter: A class that defines conditions used in the matching process.</li> <li>priority: The priority level of the handler, where 0 is the highest priority.</li> <li>scope: The context or scope in which the text matching will be checked.</li> </ul> <pre><code>@CommonHandler.Text([\"text\"], filter = isNewUserFilter::class, priority = 10)\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#commonhandlerregex","title":"CommonHandler.Regex","text":"<p>Similar to <code>CommonHandler.Text</code>, this annotation is used for matching updates based on regular expressions. It includes properties for defining the regex pattern, options, filtering conditions, priority, and scope.</p> <ul> <li>value: The regex pattern used for matching.</li> <li>options: Regex options that modify the behavior of the regex pattern.</li> <li>filter: A class that defines conditions used in the matching process.</li> <li>priority: The priority level of the handler, where 0 is the highest priority.</li> <li>scope: The context or scope in which the regex matching will be checked.</li> </ul> <pre><code>@CommonHandler.Regex(\"^\\d+$\", scope = [UpdateType.EDITED_MESSAGE])\nsuspend fun test(update: EditedMessageUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#inputhandler","title":"InputHandler","text":"<p>The <code>InputHandler</code> annotation marks functions that process specific input events. It is intended for functions that handle inputs at runtime and includes properties for defining input keywords and scopes.</p> <ul> <li>value: Specifies the keywords associated with the input event.</li> </ul> <pre><code>@InputHandler(\"text\")\nsuspend fun test(update: ProcessedUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#unprocessedhandler","title":"UnprocessedHandler","text":"<p>The <code>UnprocessedHandler</code> annotation is used to mark functions that handle updates not processed by other handlers. It ensures that any unprocessed updates are managed appropriately, with only one processing point possible for this handler type.</p> <pre><code>@UnprocessedHandler\nsuspend fun test(update: ProcessedUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#updatehandler","title":"UpdateHandler","text":"<p>The <code>UpdateHandler</code> annotation marks functions that handle specific types of incoming updates. It provides a way to categorize and process different update types systematically.</p> <ul> <li>type: Specifies the types of updates the handler function will process.</li> </ul> <pre><code>@UpdateHandler([UpdateType.PRE_CHECKOUT_QUERY])\nsuspend fun test(update: PreCheckoutQueryUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#handler-companion-annotations","title":"Handler Companion Annotations","text":"<p>There are also additional annotations that are optional to the handlers, complementing the optional behavior of the handlers itself.</p> <p>They can be placed both on functions to which a handler is applied and on classes, in the latter case they will be automatically applied to all handlers in that class, but if there is a need it is possible to have separate behavior for some functions.</p> <p>I.e. the applying has such a priority, <code>Function</code> &gt; <code>Class</code>, where function have higher priority.</p>"},{"location":"Handlers/#rate-limiting","title":"Rate Limiting","text":"<p>In addition, let us also disclose the rate limiting mechanism described in the annotations.</p> <p>You can set general limits for each user:</p> <pre><code>// ...\nval bot = TelegramBot(\"BOT_TOKEN\") {\n    rateLimiter { // general limits\n        limits = RateLimits(period = 10000, rate = 5)\n    }\n}\n</code></pre>"},{"location":"Handlers/#handler-specific","title":"# Handler specific","text":"<p>Limits on certain actions can be defined using the <code>RateLimits</code> annotation, supported <code>@CommandHandler</code>, <code>@CommandHandler.CallbackQuery</code>, <code>@InputHandler</code>, <code>@CommonHandler</code>.</p> <pre><code>@CommandHandler([\"/start\"])\n@RateLimits(period = 1000L, rate = 1L)\nsuspend fun start(user: User, bot: TelegramBot) {\n    // ...\n}\n</code></pre>"},{"location":"Handlers/#guard","title":"Guard","text":"<p>You can define guards separately to control access to handlers, supported <code>@CommandHandler</code>, <code>@CommandHandler.CallbackQuery</code>, <code>@InputHandler</code> :</p> <pre><code>@CommandHandler([\"text\"])\n@Guard(isAdminGuard::class)\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"Handlers/#argparser","title":"ArgParser","text":"<p>You can define custom argument parser separately to change parameters parsing behaviour for handlers, supported <code>@CommandHandler</code>, <code>@CommandHandler.CallbackQuery</code>, <code>@CommonHandler</code>:</p> <pre><code>@CommandHandler([\"text\"])\n@ArgParser(SpaceArgParser::class)\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre> <p>see also <code>defaultArgParser</code></p>"},{"location":"Handlers/#conclusion","title":"Conclusion","text":"<p>These annotations provide robust and flexible tools for handling commands, inputs, and events, while allowing for separate configurations of rate limits and guards, enhancing the overall structure and maintainability of bot development.</p>"},{"location":"Handlers/#see-also","title":"See also","text":"<ul> <li>Activities &amp; Processors</li> <li>Activity invocation</li> <li>FSM and Conversation handling</li> <li>Update parsing</li> <li>Aide</li> </ul>"},{"location":"Middlewares/","title":"Middlewares","text":"<p>When you're building a Telegram bot, you often end up repeating the same setup, checks, or clean\u2011up code across many handlers. Middleware helps you avoid that. It lets you plug in common logic around your handlers, so your main code stays clean, focused, and easier to maintain.</p> <p>Here\u2019s how middleware works in telegram\u2011bot, and how you can use it in your own projects.</p>"},{"location":"Middlewares/#what-is-middleware-in-simple-terms","title":"\u201cWhat is Middleware?\u201d (in simple terms)","text":"<p>Think of middleware like a security guard + reporter + helper that stands in three places along the path of each update:</p> <ol> <li>Before anything happens</li> <li>Right before your handler runs</li> <li>After your handler finished</li> </ol> <p>You can attach code to each of those moments to do things like check if someone is allowed, modify the data, log what\u2019s going on, or clean up afterward.</p>"},{"location":"Middlewares/#the-three-hook-points-why-theyre-useful","title":"The Three Hook Points &amp; Why They\u2019re Useful","text":"<p>Here are the three hooks (points you can attach middleware) in telegram\u2011bot, and what they let you do:</p> Hook When it runs What you can use it for preHandle As soon as the update arrives, before the library picks which handler should run \u2714 Filter out irrelevant updates (spam, malformed, etc.) \u2714 Global checks: is user banned? Is the message coming from a channel you support? \u2714 Logging: \u201cHey, got this update\u201d \u2714 Setup shared context (e.g. user data you\u2019ll need later) preInvoke After deciding which handler should run, but just before calling it \u2714 Handler\u2011specific conditions (maybe some handlers require special permissions) \u2714 Enriching the update for that handler (e.g. parse arguments) \u2714 Starting timers / metrics for how long the handler takes \u2714 If something is missing, you might cancel here (don\u2019t call the handler) postInvoke After the handler is done (whether success or failure), just before returning control \u2714 Log what happened: success / error, time taken \u2714 Clean up resources opened in preInvoke \u2714 If the handler threw an error, handle it here (send fallback message, etc.) \u2714 Maybe modify the result before sending reply or finishing"},{"location":"Middlewares/#reallife-example","title":"Real\u2011Life Example","text":"<p>Here\u2019s a short imaginary example showing how middleware could help:</p> <p>Suppose you have a bot that responds to commands, but only certain users are allowed to run some commands, and you also want to measure how long each command takes, plus log every command usage.</p> <p>You might set up middleware like this:</p> <ul> <li>In preHandle: reject the update if the user is banned (don\u2019t bother doing anything else).</li> <li>In preInvoke: check if the user has permission for this specific handler. If not, send \u201cYou\u2019re not allowed\u201d. Also start a timer.</li> <li>In postInvoke: stop the timer, record how long the handler took. If there was an exception, send an error message and log stack trace.</li> </ul> <p>This keeps your handler code very simple: \u201cHere\u2019s what I\u2019m supposed to do when everything is good\u201d.</p>"},{"location":"Middlewares/#some-tips-best-practices","title":"Some Tips &amp; Best Practices","text":"<ul> <li> <p>Only do what needs to happen at each stage: don\u2019t overload <code>preHandle</code> or <code>postInvoke</code> with everything. It helps keep things predictable.</p> </li> <li> <p>Order matters! If you have multiple middleware, the order in which <code>preHandle</code> and <code>preInvoke</code> run has a big effect. Make sure more general checks happen first, more specific ones later.</p> </li> <li> <p>Clean up after yourself \u2014 if you open resources or timers in <code>preInvoke</code>, do the matching cleanup in <code>postInvoke</code>, even if something went wrong.</p> </li> <li> <p>Use middleware for things that are \u201cshared logic\u201d \u2014 auth, logging, metrics, filtering. For code that\u2019s specific to one handler, usually keep it in the handler.</p> </li> <li> <p>Make sure errors are handled gracefully in middleware. If a middleware throws, downstream code or the bot runtime should still behave in a controlled way, not crash.</p> </li> </ul>"},{"location":"Update-parsing/","title":"Update Parsing","text":""},{"location":"Update-parsing/#text-payload","title":"Text payload","text":"<p>Certain updates may have text payload that can be parsed for further processing. Let's take a look at them:</p> <ul> <li><code>MessageUpdate</code> -&gt; <code>message.text</code></li> <li><code>EditedMessageUpdate</code> -&gt; <code>editedMessage.text</code></li> <li><code>ChannelPostUpdate</code> -&gt; <code>channelPost.text</code></li> <li><code>EditedChannelPostUpdate</code> -&gt; <code>editedChannelPost.text</code></li> <li><code>InlineQueryUpdate</code> -&gt; <code>inlineQuery.query</code></li> <li><code>ChosenInlineResultUpdate</code> -&gt; <code>chosenInlineResult.query</code></li> <li><code>CallbackQueryUpdate</code> -&gt; <code>callbackQuery.data</code></li> <li><code>ShippingQueryUpdate</code> -&gt; <code>shippingQuery.invoicePayload</code></li> <li><code>PreCheckoutQueryUpdate</code> -&gt; <code>preCheckoutQuery.invoicePayload</code></li> <li><code>PollUpdate</code> -&gt; <code>poll.question</code></li> <li><code>PurchasedPaidMediaUpdate</code> -&gt; <code>purchasedPaidMedia.paidMediaPayload</code></li> </ul> <p>From the listed updates, a certain parameter is selected and taken as <code>TextReference</code>, for further parsing.</p>"},{"location":"Update-parsing/#parsing","title":"Parsing","text":"<p>The selected parameters are parsed with the appropriate configured delimiters into the command and parameters to it.</p> <p>See configuration <code>commandParsing</code> block.</p> <p>You can see in the diagram below which components are mapped to which parts of the target function.</p> <p> </p>"},{"location":"Update-parsing/#parammapping","title":"@ParamMapping","text":"<p>There is also an annotation called <code>@ParamMapping</code> for convenience or for any special case. </p> <p>It allows you to map the name of the parameter from the incoming text to any parameter. </p> <p>This is also convenient when your incoming data is limited, for example, <code>CallbackData</code> (64 characters).</p> <p>See example of usage: <code>greeting?name=Adam</code></p> <pre><code>@CommandHandler([\"greeting\"])\nsuspend fun greeting(@ParamMapping(\"name\") anyParameterName: String, user: User, bot: TelegramBot) {\n    message { \"Hello, $anyParameterName\" }.send(to = user, via = bot)\n}\n</code></pre> <p>And also it can be used for catching unnamed parameters, in cases where the parser is set up such that parameter names are skipped or even they absent, which passes by 'param_n' pattern, where <code>n</code> is its ordinal.</p> <p>For example such text - <code>myCommand?p1=v1&amp;v2&amp;p3=&amp;p4=v4&amp;p5=</code>, will be parsed to: * command - <code>myCommand</code> * parameters   * <code>p1</code> = <code>v1</code>   * <code>param_2</code> = <code>v2</code>   * <code>p3</code> = <code>* `p4` = `v4`   * `p5` =</code></p> <p>As you can see since second parameter don't have declared name it represented as <code>param_2</code>.</p> <p>So you can abbreviate the variable names in the callback itself and use clear readable names in the code.</p>"},{"location":"Update-parsing/#deeplink","title":"Deeplink","text":"<p>Considering the information from above if you expect deeplink in your start command you can catch it with:</p> <pre><code>@CommandHandler([\"/start\"])\nsuspend fun start(@ParamMapping(\"param_1\") deeplink: String?, user: User, bot: TelegramBot) {\n    message { \"deeplink is $deeplink\" }.send(to = user, via = bot)\n}\n</code></pre>"},{"location":"Update-parsing/#group-commands","title":"Group commands","text":"<p>In <code>commandParsing</code> configuration we have parameter <code>useIdentifierInGroupCommands</code> when it turned on, we can use <code>TelegramBot.identifier</code> (don't forget to change it if you are using described parameter) in the command matching process, it helps to separate similar commands between several bots, otherwise the <code>@MyBot</code> part will just be skipped. </p>"},{"location":"Update-parsing/#see-also","title":"See also","text":"<ul> <li>Activity invocation</li> <li>Activities &amp; Processors</li> <li>Actions</li> </ul>"},{"location":"Useful-utilities-and-tips/","title":"Useful Utilities And Tips","text":""},{"location":"Useful-utilities-and-tips/#aide-compiler-plugin","title":"Aide Compiler Plugin [\ud83d\udd2c]","text":"<p>feature disabled by default, to use it enable in plugin parameters</p>"},{"location":"Useful-utilities-and-tips/#configuration","title":"Configuration","text":"<p>Configure Aide in your <code>build.gradle.kts</code>:</p> <pre><code>ktGram {\n    // Enable AIDE compiler extensions (Automatic .send() chaining)\n    aideEnabled = true\n\n}\n</code></pre>"},{"location":"Useful-utilities-and-tips/#usage-example","title":"Usage Example","text":""},{"location":"Useful-utilities-and-tips/#simple-case","title":"Simple case","text":"<pre><code>@CommandHandler\nsuspend fun handler(user: User, bot: TelegramBot) {\n    // With aideAutoSend=true\n    message {\n        \"Auto-sent message\"\n    } // \u2190 Compiler adds .send(user, bot)\n\n    // Explicit control\n    message { \n        \"Manual send\"\n    }.send(user, bot) // \u2190 No auto-add when present\n}\n</code></pre> <p>Caution</p> <p>Be aware that even if you do not use an explicit <code>send</code>, you still need to have <code>suspend</code> function keyword, otherwise you will get an error.</p>"},{"location":"Useful-utilities-and-tips/#complex-case-manual-handling-required","title":"Complex Case (Manual Handling Required)","text":"<pre><code>@InputHandler\nfun handleInput(user: User, bot: TelegramBot) {\n    // Requires manual .send()\n    val savedAction = message {\n        \"Stored action\"\n    }\n\n    // Valid usage with explicit send\n    savedAction.send(user, bot)\n}\n</code></pre>"},{"location":"Useful-utilities-and-tips/#validation-rules","title":"# Validation Rules","text":"<ul> <li> <p>Auto-Send Applies When:</p> <ul> <li>Action is directly returned from handler</li> <li>No intermediate variable assignment</li> <li>No existing <code>.send()</code> call</li> </ul> </li> </ul>"},{"location":"Useful-utilities-and-tips/#requirements","title":"Requirements","text":"<ul> <li>Handler must declare parameters:</li> <li><code>User</code> for general actions (simple action require just <code>TelegramBot</code>)</li> <li><code>TelegramBot</code> for all actions</li> <li>Annotated with <code>@CommandHandler</code>, <code>@InputHandler</code>, etc (any supported annotation).</li> </ul>"},{"location":"Useful-utilities-and-tips/#operating-with-processedupdate","title":"Operating with ProcessedUpdate","text":"<p>The <code>ProcessedUpdate</code> is a generic class for updates which, depending on the original data, can be provided in different types (<code>MessageUpdate</code>, <code>CallbackQueryUpdate</code>, etc.)</p> <p>So you can check the type of incoming data and further manipulate certain data with smartcasts, for example:</p> <pre><code>// ...\nif (update !is MessageUpdate) {\n    message { \"Only messages are allowed\" }.send(user, bot)\n    return\n}\n// Further on, ProcessedUpdate will be perceived as MessageUpdate.\n</code></pre> <p>There's also an <code>UserReference</code> interface inside that lets you determine if there's a user reference inside, example use case:</p> <pre><code>val user = if(update is UserReference) update.user else null\n</code></pre> <p>If needed inside there is always the original <code>update</code> in the update parameter.</p>"},{"location":"Useful-utilities-and-tips/#dependency-injection","title":"Dependency injection","text":"<p>The library uses simple mechanism to initialize classes where your update processing methods are annotated with the provided annotations.</p> <p><code>ClassManagerImpl</code> is used by default to invoke annotated methods.</p> <p>But if you want to use some other libraries for that you can redefine the <code>ClassManager</code> interface, using your preferred mechanism and pass it on when initializing the bot.</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\", \"com.example.controllers\") {\n        classManager = ClassManagerImpl()\n    }\n\n    bot.handleUpdates()\n}\n</code></pre>"},{"location":"Useful-utilities-and-tips/#filtering-updates","title":"Filtering updates","text":"<p>If there's no complex conditions you can simply filter some updates for being processed:</p> <pre><code>// function where updates filtering condition defined\nfun filteringFun(update: Update): Boolean = update.message?.text.isNullOrBlank()\n\nfun main() = runBlocking {\n  val bot = TelegramBot(\"BOT_TOKEN\")\n\n  // setting more specific processing flow for updates\n  bot.update.setListener {\n    if(filteringFun(it)) return@setListener\n\n    // so simply, if the listener left the scope before reaching the handler function, that it is filtering.\n    // actually you can even write directly if-condition there with return@setListener or extend filtering to separate class.\n\n    handle(it) // or manual handling way with block\n  }\n}\n</code></pre> <p>to include filtering in your command matching or excluding process take a look at guards or <code>@CommonHandler</code>.</p>"},{"location":"Useful-utilities-and-tips/#generalize-options-for-different-methods","title":"Generalize options for different methods","text":"<p>If you have to apply the same optional parameters often, you can write a similar function that suits you and lighten the boilerplate code :)</p> <p>Some common properties are separated to different interfaces.</p> <pre><code>@Suppress(\"NOTHING_TO_INLINE\")\ninline fun &lt;T, R, O&gt; T.markdownMode(crossinline block: O.() -&gt; Unit = {}): T\n        where               T : TgAction&lt;R&gt;,\n                            T : OptionsFeature&lt;T, O&gt;,\n                            O : Options,\n                            O : OptionsParseMode =\n    options {\n        parseMode = ParseMode.Markdown\n        block()\n    }\n\n\n// ... and in your code\n\nmessage { \"test\" }.markdownMode().send(to, via)\n</code></pre>"},{"location":"Useful-utilities-and-tips/#processing-context-matched-regex-parsed-parameters","title":"Processing context (Matched Regex, Parsed Parameters)","text":"<p>There's also context collected while processing, for example you can access matches in <code>@CommonHandler.Regex</code> through <code>update._getRegexMatch()</code>.</p> <p>Or to get raw parsed parameters you can turn collecting them through config <code>processingCtxTargets</code> and access them through <code>update._getParsedParameters()</code></p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/","title":"Web Starters (Spring And Ktor)","text":""},{"location":"Web-starters-%28Spring-and-Ktor%29/#spring-starter","title":"Spring starter","text":"<p>The Spring Starter module for library is an auto-configuration module that integrates Telegram bot functionalities into Spring Boot applications. It leverages the power of Spring Boot's dependency injection and configuration properties to automatically configure Telegram bots based on the provided configuration. This library is particularly useful for developers looking to build Telegram bots using Kotlin and Spring Boot, offering a streamlined approach to bot development and management.</p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#key-features","title":"Key Features","text":"<ul> <li>Auto-Configuration: The library automatically configures Telegram bots based on the provided configuration properties, eliminating the need for manual setup.</li> <li>Configuration Properties: It supports configuration properties for easy customization of bot settings, such as bot tokens, package names, and identifiers.</li> <li>Spring Integration: Seamlessly integrates with the Spring ecosystem, utilizing Spring's dependency injection and application context for managing bot instances.</li> <li>Coroutine Support: Leverages Kotlin coroutines for asynchronous bot operations, ensuring efficient and non-blocking execution.</li> </ul>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#getting-started","title":"Getting Started","text":"<p>To use the Spring Starter Library for Telegram Bots, you need to include it as a dependency in your Spring Boot project. The library is designed to work with Spring Boot applications and requires the Spring Boot framework to function.</p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#dependency","title":"Dependency","text":"<p>Add the following dependency to your <code>build.gradle</code> or <code>pom.xml</code> file:</p> <pre><code>dependencies {\n    implementation 'eu.vendeli:spring-starter:&lt;version&gt;'\n}\n</code></pre> <p>Replace <code>&lt;version&gt;</code> with the latest version of the library.</p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#configuration","title":"Configuration","text":"<p>The library uses Spring Boot's <code>@ConfigurationProperties</code> to bind configuration properties. You can define your bot configurations in the <code>application.properties</code> or <code>application.yml</code> file of your Spring Boot application.</p> <pre><code>ktgram:\n autoStartPolling: true\n shareHttpClient: true\n bot:\n    - token: YOUR_BOT_TOKEN\n      pckg: com.example.bot\n      identifier: MyBot\n</code></pre>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#usage","title":"Usage","text":"<p>Once the library is included and configured, it automatically creates and configures Telegram bot instances based on the provided configuration.</p> <p>It also supports multiple bot instances, to initialize several ones just declare it as new entry in bot section:</p> <pre><code>ktgram:\n bot:\n    - token: YOUR_BOT_TOKEN\n    - token: SECOND_BOT_TOKEN\n</code></pre>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#advanced-configuration","title":"Advanced Configuration","text":"<p>For more advanced configurations, such as customizing bot behavior or integrating with other Spring components, you can extend the <code>BotConfiguration</code> class and change bot configuration through its <code>applyCfg</code> method, you can see example there.</p> <p>Tip</p> <p>To configure each initialized instance with a custom configuration, distinguish them by their identifier (the BotConfiguration class also has an identifier).</p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#ktor","title":"Ktor","text":"<p>The module is designed to facilitate the creation of a webhook server for Telegram bots. It allows developers to configure the server, including SSL/TLS settings, and declare multiple Telegram bots with custom configurations. The setup process is flexible, enabling developers to tailor the server to their specific needs.</p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#installation","title":"Installation","text":"<p>To install ktor starter add additional to main dependency:</p> <pre><code>dependencies {\n    implementation(\"eu.vendeli:ktor-starter:x.y.z\") // there\n    // change x.y.z to current library version\n}\n</code></pre>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#key-components","title":"Key Components","text":"<p><code>serveWebhook</code> Function</p> <p>The serveWebhook function is the core of the library. It sets up and starts the webhook server for Telegram bots. It accepts two parameters:</p> <ul> <li><code>wait</code>: A boolean indicating whether the server should wait for the application to stop before shutting down. Defaults to true.</li> <li><code>serverBuilder</code>: A lambda function that configures the server. Defaults to an empty lambda.</li> </ul>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#configuration_1","title":"Configuration","text":"<ul> <li><code>WEBHOOK_PREFIX</code>: it's paramter that will be used for address prefix for webhook listener route. (defaults to \"/\")</li> </ul>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#server-setup","title":"Server Setup","text":"<ul> <li><code>server</code>: A method to set the server configuration using either EnvConfiguration or ManualConfiguration.</li> <li><code>engine</code>: A method to configure the Netty application engine.</li> <li><code>ktorModule</code>: A method to add Ktor modules to the application.</li> </ul> <p>The library provides wide range of configurable parameters for the server, including host, port, SSL settings, and more. There are two concrete options for its configuring: </p> <ul> <li><code>EnvConfiguration</code>: Reads configuration values from environment with <code>KTGRAM_</code> prefix.</li> <li><code>ManualConfiguration</code>: Allows for manual setting of configuration values, set your parameters in <code>server {}</code> function.</li> </ul> <p>There's list of parameters that can be set:</p> <ul> <li><code>HOST</code>: The hostname or IP address of the server.</li> <li><code>PORT</code>: The port number for the server.</li> <li><code>SSL_PORT</code>: The port number for SSL/TLS connections.</li> <li><code>PEM_PRIVATE_KEY_PATH</code>: The path to the PEM private key file.</li> <li><code>PEM_CHAIN_PATH</code>: The path to the PEM certificate chain file.</li> <li><code>PEM_PRIVATE_KEY</code>: The PEM private key PASSWORD as a character array.</li> <li><code>KEYSTORE_PATH</code>: The path to the Java KeyStore file.</li> <li><code>KEYSTORE_PASSWORD</code>: The password for the KeyStore.</li> <li><code>KEY_ALIAS</code>: The alias for the key in the KeyStore.</li> <li><code>SSL_ON</code>: A boolean indicating whether SSL/TLS should be enabled. Defaults to true.</li> </ul> <p>Tip</p> <p>If pem certificates are present, the module itself will create a jks storage from them at the specified path.</p>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#bot-configuration","title":"Bot Configuration:","text":"<p>To configure bot call <code>declareBot {}</code> which have such parameters:</p> <ul> <li><code>token</code>: The bot token.</li> <li><code>pckg</code>: The package name for the bot.</li> <li><code>configuration</code>: A lambda function for configuring the bot.</li> <li><code>handlingBehaviour</code>: A lambda function for setting the bot's handling behavior.</li> <li><code>onInit</code>: A lambda function to be executed when the bot is initialized.</li> </ul>"},{"location":"Web-starters-%28Spring-and-Ktor%29/#example-usage","title":"Example Usage","text":"<p>To use this module, call <code>serveWebhook</code> function, configure it with your desired settings, declare your bots. Here's a simplified example:</p> <pre><code>fun main() = runBlocking {\n    serveWebhook {\n        server {\n            HOST = \"0.0.0.0\"\n            PORT = 8080\n            SSL_PORT = 8443\n\n            PEM_PRIVATE_KEY_PATH = \"/etc/letsencrypt/live/example.com/privkey.pem\"\n            PEM_CHAIN_PATH = \"/etc/letsencrypt/live/example.com/fullchain.pem\"\n            PEM_PRIVATE_KEY = \"pem_changeit\".toCharArray()\n\n            KEYSTORE_PATH = \"/etc/ssl/certs/java/cacerts/bot_keystore.jks\"\n            KEYSTORE_PASSWORD = \"changeit\".toCharArray()\n            // Set other configuration parameters as needed\n        }\n        declareBot {\n            token = \"YOUR_BOT_TOKEN\"\n            // Configure other bot settings\n        }\n        // Add more bots or set other parameters if needed\n    }\n}\n</code></pre> <p>Caution</p> <p>Don't forget to set webhook to make everything work. :)</p> <p>By default module will serve webhook listenening endpoints as <code>host/BOT_TOKEN</code></p>"},{"location":"zh/","title":"\u9996\u9875","text":""},{"location":"zh/#_1","title":"\u4ecb\u7ecd","text":"<p>\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u5e93\u5982\u4f55\u5904\u7406\u66f4\u65b0\u7684\u603b\u4f53\u60c5\u51b5\uff1a</p> <p> </p> <p>\u5728\u63a5\u6536\u5230\u66f4\u65b0\u540e\uff0c\u5e93\u6267\u884c\u4e09\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff0c\u5982\u6211\u4eec\u6240\u89c1\u3002</p>"},{"location":"zh/#_2","title":"\u5904\u7406","text":"<p>\u5904\u7406\u662f\u5c06\u63a5\u6536\u5230\u7684\u66f4\u65b0\u91cd\u65b0\u6253\u5305\u4e3a\u9002\u5f53\u7684 <code>ProcessedUpdate</code> \u5b50\u7c7b\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6240\u643a\u5e26\u7684\u6709\u6548\u8d1f\u8f7d\u3002</p> <p>\u6b64\u6b65\u9aa4\u7684\u76ee\u7684\u662f\u4f7f\u64cd\u4f5c\u66f4\u65b0\u66f4\u5bb9\u6613\uff0c\u5e76\u6269\u5c55\u5904\u7406\u80fd\u529b\u3002</p>"},{"location":"zh/#_3","title":"\u5904\u7406","text":"<p>\u63a5\u4e0b\u6765\u662f\u4e3b\u8981\u6b65\u9aa4\uff0c\u8fd9\u91cc\u6211\u4eec\u8fdb\u5165\u5904\u7406\u672c\u8eab\u3002</p>"},{"location":"zh/#_4","title":"\u5168\u5c40\u901f\u7387\u9650\u5236\u5668","text":"<p>\u5982\u679c\u66f4\u65b0\u4e2d\u6709\u7528\u6237\uff0c\u6211\u4eec\u4f1a\u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u4e86\u5168\u5c40\u901f\u7387\u9650\u5236\u5668\u3002</p>"},{"location":"zh/#_5","title":"\u89e3\u6790\u6587\u672c","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6839\u636e\u6709\u6548\u8d1f\u8f7d\uff0c\u6211\u4eec\u83b7\u53d6\u5305\u542b\u6587\u672c\u7684\u7279\u5b9a\u66f4\u65b0\u7ec4\u4ef6\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u8fdb\u884c\u89e3\u6790\u3002</p> <p>\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u53ef\u4ee5\u5728 \u66f4\u65b0\u89e3\u6790\u6587\u7ae0 \u4e2d\u67e5\u770b\u3002</p>"},{"location":"zh/#_6","title":"\u67e5\u627e\u6d3b\u52a8","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6839\u636e\u5904\u7406\u4f18\u5148\u7ea7\uff1a</p> <p> </p> <p>\u6211\u4eec\u5728\u89e3\u6790\u7684\u6570\u636e\u4e0e\u6211\u4eec\u6b63\u5728\u64cd\u4f5c\u7684\u6d3b\u52a8\u4e4b\u95f4\u5bfb\u627e\u5bf9\u5e94\u5173\u7cfb\u3002 \u5982\u4f18\u5148\u7ea7\u56fe\u6240\u793a\uff0c<code>Commands</code> \u603b\u662f\u4f18\u5148\u3002</p> <p>\u5373\uff0c\u5982\u679c\u66f4\u65b0\u4e2d\u7684\u6587\u672c\u8d1f\u8f7d\u5bf9\u5e94\u4e8e\u4efb\u4f55\u547d\u4ee4\uff0c\u5219\u4e0d\u4f1a\u8fdb\u4e00\u6b65\u641c\u7d22 <code>Inputs</code>\u3001<code>Common</code>\uff0c\u5f53\u7136\u4e5f\u4e0d\u4f1a\u6267\u884c <code>Unprocessed</code> \u64cd\u4f5c\u3002</p> <p>\u552f\u4e00\u7684\u4f8b\u5916\u662f\uff0c\u5982\u679c\u5b58\u5728 <code>UpdateHandlers</code>\uff0c\u5219\u4f1a\u5e76\u884c\u89e6\u53d1\u3002</p>"},{"location":"zh/#_7","title":"\u547d\u4ee4","text":"<p>\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u547d\u4ee4\u53ca\u5176\u5904\u7406\u3002</p> <p>\u6b63\u5982\u60a8\u53ef\u80fd\u6ce8\u610f\u5230\u7684\uff0c\u5c3d\u7ba1\u5904\u7406\u547d\u4ee4\u7684\u6ce8\u89e3\u79f0\u4e3a <code>CommandHandler</code>\uff0c\u4f46\u5b83\u6bd4 Telegram \u673a\u5668\u4eba\u7684\u7ecf\u5178\u6982\u5ff5\u66f4\u4e3a\u901a\u7528\u3002</p>"},{"location":"zh/#_8","title":"\u4f5c\u7528\u57df","text":"<p>\u8fd9\u662f\u56e0\u4e3a\u5b83\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u5904\u7406\u53ef\u80fd\u6027\uff0c\u5373\u76ee\u6807\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u6839\u636e\u6587\u672c\u5339\u914d\u6765\u5b9a\u4e49\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u9002\u5f53\u66f4\u65b0\u7684\u7c7b\u578b\u6765\u5b9a\u4e49\uff0c\u8fd9\u5c31\u662f\u4f5c\u7528\u57df\u7684\u6982\u5ff5\u3002</p> <p>\u56e0\u6b64\uff0c\u6bcf\u4e2a\u547d\u4ee4\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u5177\u6709\u4e0d\u540c\u7684\u5904\u7406\u5668\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u4f5c\u7528\u57df\u3002</p> <p>\u4e0b\u9762\u60a8\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u901a\u8fc7\u6587\u672c\u8d1f\u8f7d\u548c\u4f5c\u7528\u57df\u8fdb\u884c\u6620\u5c04\uff1a</p> <p> </p>"},{"location":"zh/#_9","title":"\u8f93\u5165","text":"<p>\u63a5\u4e0b\u6765\uff0c\u5982\u679c\u6587\u672c\u8d1f\u8f7d\u4e0e\u4efb\u4f55\u547d\u4ee4\u4e0d\u5339\u914d\uff0c\u5219\u4f1a\u641c\u7d22\u8f93\u5165\u70b9\u3002</p> <p>\u8be5\u6982\u5ff5\u4e0e\u547d\u4ee4\u884c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8f93\u5165\u7b49\u5f85\u975e\u5e38\u76f8\u4f3c\uff0c\u60a8\u4e3a\u7279\u5b9a\u7528\u6237\u5728\u673a\u5668\u4eba\u4e0a\u4e0b\u6587\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u70b9\uff0c\u8be5\u70b9\u5c06\u5904\u7406\u4ed6\u7684\u4e0b\u4e00\u4e2a\u8f93\u5165\uff0c\u65e0\u8bba\u5b83\u5305\u542b\u4ec0\u4e48\uff0c\u4e3b\u8981\u662f\u4e0b\u4e00\u4e2a\u66f4\u65b0\u5fc5\u987b\u6709\u4e00\u4e2a <code>User</code> \u4ee5\u4fbf\u80fd\u591f\u5c06\u5176\u4e0e\u8bbe\u7f6e\u7684\u8f93\u5165\u7b49\u5f85\u70b9\u5173\u8054\u3002</p> <p>\u4e0b\u9762\u60a8\u53ef\u4ee5\u770b\u5230\u5728\u6ca1\u6709\u5339\u914d <code>Commands</code> \u65f6\u5904\u7406\u66f4\u65b0\u7684\u793a\u4f8b\u3002</p> <p> </p>"},{"location":"zh/#_10","title":"\u5e38\u89c4","text":"<p>\u5982\u679c\u5904\u7406\u5668\u672a\u627e\u5230 <code>commands</code> \u6216 <code>inputs</code>\uff0c\u5219\u4f1a\u68c0\u67e5\u6587\u672c\u8d1f\u8f7d\u4e0e <code>common</code> \u5904\u7406\u5668\u7684\u5339\u914d\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u5728\u4e0d\u6ee5\u7528\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5bf9\u6240\u6709\u6761\u76ee\u8fdb\u884c\u8fed\u4ee3\u68c0\u67e5\u3002</p>"},{"location":"zh/#_11","title":"\u672a\u5904\u7406","text":"<p>\u6700\u540e\u4e00\u6b65\uff0c\u5982\u679c\u5904\u7406\u5668\u672a\u627e\u5230\u4efb\u4f55\u5339\u914d\u7684\u6d3b\u52a8\uff08<code>UpdateHandler</code> \u5b8c\u5168\u5e76\u884c\u5de5\u4f5c\uff0c\u4e0d\u7b97\u4f5c\u5e38\u89c4\u6d3b\u52a8\uff09\uff0c\u5219\u4f1a\u8c03\u7528 <code>UnprocessedHandler</code>\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u5b83\uff0c\u5c06\u5904\u7406\u6b64\u60c5\u51b5\uff0c\u8fd9\u53ef\u80fd\u6709\u52a9\u4e8e\u8b66\u544a\u7528\u6237\u67d0\u4e9b\u4e8b\u60c5\u51fa\u9519\u4e86 ```markdown \u3002</p> <p>\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u53ef\u4ee5\u5728 \u5904\u7406\u5668\u6587\u7ae0 \u4e2d\u67e5\u770b\u3002</p>"},{"location":"zh/#_12","title":"\u6d3b\u52a8\u901f\u7387\u9650\u5236\u5668","text":"<p>\u5728\u627e\u5230\u6d3b\u52a8\u540e\uff0c\u5b83\u8fd8\u4f1a\u6839\u636e\u6d3b\u52a8\u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u53c2\u6570\u68c0\u67e5\u7528\u6237\u7684\u901f\u7387\u9650\u5236\u3002</p>"},{"location":"zh/#_13","title":"\u6d3b\u52a8","text":"<p>\u6d3b\u52a8\u662f\u6307 Telegram \u673a\u5668\u4eba\u5e93\u53ef\u4ee5\u5904\u7406\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u5904\u7406\u5668\uff0c\u5305\u62ec\u547d\u4ee4\u3001\u8f93\u5165\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u672a\u5904\u7406\u7684\u5904\u7406\u5668\u3002</p>"},{"location":"zh/#_14","title":"\u8c03\u7528","text":"<p>\u6700\u540e\u7684\u5904\u7406\u6b65\u9aa4\u662f\u8c03\u7528\u627e\u5230\u7684\u6d3b\u52a8\u3002</p> <p>\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728 \u8c03\u7528\u6587\u7ae0 \u4e2d\u627e\u5230\u3002</p>"},{"location":"zh/#_15","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u66f4\u65b0\u89e3\u6790</li> <li>\u6d3b\u52a8\u8c03\u7528</li> <li>\u5904\u7406\u5668</li> <li>\u673a\u5668\u4eba\u914d\u7f6e</li> <li>Web \u542f\u52a8\u5668\uff08Spring\u3001Ktor\uff09</li> </ul>"},{"location":"zh/Actions/","title":"\u52a8\u4f5c","text":""},{"location":"zh/Actions/#_1","title":"\u6240\u6709\u8bf7\u6c42\u662f\u52a8\u4f5c","text":"<p>\u6240\u6709\u7684 Telegram API \u8bf7\u6c42\u90fd\u662f\u5404\u79cd\u7c7b\u578b\u7684 <code>TgAction</code> \u63a5\u53e3\uff0c\u5b9e\u65bd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5982 <code>SendMessageAction</code>\uff0c  \u8fd9\u4e9b\u65b9\u6cd5\u4ee5 <code>message()</code> - \u7c7b\u578b\u51fd\u6570\u7684\u5f62\u5f0f\u5c01\u88c5\uff0c\u4ee5\u65b9\u4fbf\u5e93\u63a5\u53e3\u7684\u4f7f\u7528\u3002</p> <p> </p> <p>\u6bcf\u4e2a <code>Action</code> \u53ef\u80fd\u5177\u6709\u81ea\u5df1\u7684\u53ef\u80fd\u65b9\u6cd5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u53ef\u7528\u7684 <code>Feature</code>\u3002</p>"},{"location":"zh/Actions/#_2","title":"\u7279\u6027","text":"<p>\u4e0d\u540c\u7684\u52a8\u4f5c\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684 <code>Features</code>\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e Telegram Bot API\uff0c\u4f8b\u5982\uff1a <code>OptionsFeature</code>\uff0c <code>MarkupFeature</code> <code>EntitiesFeature</code> <code>CaptionFeature</code>\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5b83\u4eec\uff1a</p>"},{"location":"zh/Actions/#_3","title":"\u9009\u9879","text":"<p>\u4f8b\u5982\uff0c<code>OptionsFeature</code> \u7528\u4e8e\u4f20\u9012\u53ef\u9009\u53c2\u6570\u3002</p> <p>\u6bcf\u4e2a\u52a8\u4f5c\u90fd\u6709\u81ea\u5df1\u7c7b\u578b\u7684\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5728 <code>Action</code> \u672c\u8eab\u7684 <code>options</code> \u53c2\u6570\u4e2d\u770b\u5230\u76f8\u5e94\u7684\u5185\u5bb9\uff0c\u5728\u5c5e\u6027\u90e8\u5206\u3002  \u4f8b\u5982\uff0c<code>sendMessage</code> \u5305\u542b\u4e00\u4e2a <code>MessageOptions</code> \u6570\u636e\u7c7b\uff0c\u5177\u6709\u4e0d\u540c\u7684\u53c2\u6570\u4f5c\u4e3a\u9009\u9879\u3002</p> <p>\u793a\u4f8b\u7528\u6cd5\uff1a</p> <pre><code>message{ \"*\u6d4b\u8bd5*\" }.options {\n    parseMode = ParseMode.Markdown\n}.send(user, bot)\n</code></pre>"},{"location":"zh/Actions/#_4","title":"\u6807\u8bb0","text":"<p>\u8fd8\u6709\u4e00\u79cd\u53d1\u9001\u6807\u8bb0\u7684\u65b9\u6cd5\uff0c\u652f\u6301\u6240\u6709\u7c7b\u578b\u7684 \u952e\u76d8\uff1a  <code>ReplyKeyboardMarkup</code>\uff0c <code>InlineKeyboardMarkup</code>\uff0c <code>ForceReply</code>\uff0c <code>ReplyKeyboardRemove</code>\u3002</p>"},{"location":"zh/Actions/#_5","title":"\u5185\u8054\u952e\u76d8\u6807\u8bb0","text":"<p>\u6b64\u6784\u5efa\u5668\u5141\u8bb8\u60a8\u6784\u5efa\u5177\u6709\u4efb\u610f\u53c2\u6570\u7ec4\u5408\u7684\u5185\u8054\u6309\u94ae\u3002</p> <pre><code>message{ \"\u6d4b\u8bd5\" }.inlineKeyboardMarkup {\n    \"\u540d\u79f0\" callback \"\u56de\u8c03\u6570\u636e\"         //\n    \"\u6309\u94ae\u540d\u79f0\" url \"https://google.com\"  //--- \u8fd9\u4e24\u4e2a\u6309\u94ae\u5c06\u4f4d\u4e8e\u540c\u4e00\u884c\u3002\n    newLine() // \u6216 br()\n    \"\u5176\u4ed6\u6309\u94ae\" webAppInfo \"\u6570\u636e\"       // \u8fd9\u5c06\u4f4d\u4e8e\u5176\u4ed6\u884c\n\n    // \u60a8\u8fd8\u53ef\u4ee5\u5728\u6784\u5efa\u5668\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u6837\u5f0f\uff1a\n    callbackData(\"\u6309\u94ae\u540d\u79f0\") { \"\u56de\u8c03\u6570\u636e\" }\n}.send(user, bot)\n</code></pre> <p>\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u6784\u5efa\u5668 \u6587\u6863 \u4e2d\u67e5\u770b\u3002</p>"},{"location":"zh/Actions/#_6","title":"\u56de\u590d\u952e\u76d8\u6807\u8bb0","text":"<p>\u6b64\u6784\u5efa\u5668\u5141\u8bb8\u60a8\u6784\u5efa\u83dc\u5355\u6309\u94ae\u3002</p> <pre><code>message{ \"\u6d4b\u8bd5\" }.replyKeyboardMarkup {\n  + \"\u83dc\u5355\u6309\u94ae\"     // \u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u5143\u52a0\u8fd0\u7b97\u7b26\u6dfb\u52a0\u6309\u94ae\n  + \"\u83dc\u5355\u6309\u94ae 2\"\n  br() // \u8f6c\u5230\u7b2c\u4e8c\u884c\n  \"\u53d1\u9001\u6295\u7968 \ud83d\udc40\" requestPoll true   // \u5e26\u53c2\u6570\u7684\u6309\u94ae\n\n  options {\n    resizeKeyboard = true\n  }\n}.send(user, bot)\n</code></pre> <p>\u9002\u7528\u4e8e\u952e\u76d8\u7684\u5176\u4ed6\u9009\u9879\u53ef\u4ee5\u5728 <code>ReplyKeyboardMarkupOptions</code> \u4e2d\u67e5\u770b\u3002</p> <p>\u6709\u5173\u65b9\u6cd5\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u6784\u5efa\u5668 \u6587\u6863\u3002</p> <p>\u4f7f\u7528 DSL \u6536\u96c6\u952e\u76d8\u6807\u8bb0\u901a\u5e38\u66f4\u65b9\u4fbf\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c\u60a8\u4e5f\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u6807\u8bb0\u3002</p> <pre><code>message{ \"*\u6d4b\u8bd5*\" }.markup {\n    InlineKeyboardMarkup(\n        InlineKeyboardButton(\"\u6d4b\u8bd5\", callbackData = \"testCallback\")\n    )\n}.send(user, bot)\n</code></pre> <pre><code>message{ \"*\u6d4b\u8bd5*\" }.markup {\n    ReplyKeyboardMarkup(\n        KeyboardButton(\"\u6d4b\u8bd5\u83dc\u5355\u6309\u94ae\")\n    )\n}.send(user, bot)\n</code></pre>"},{"location":"zh/Actions/#_7","title":"\u5b9e\u4f53","text":"<p>\u8fd8\u6709\u4e00\u79cd\u53d1\u9001 <code>MessageEntity</code> \u7684\u65b9\u6cd5\u3002</p> <p>\u793a\u4f8b\u7528\u6cd5\uff1a</p> <pre><code>message{ \"\u6d4b\u8bd5 &lt;br/&gt;$hello\" }.replyKeyboardMarkup {\n    +\"\u6d4b\u8bd5\u83dc\u5355\u6309\u94ae\"\n}.entities {\n    5 to 15 url \"https://google.com\" // \u6dfb\u52a0\u6587\u672c\u94fe\u63a5\n    entity(EntityType.Bold, 0, 4)\n    entity(EntityType.Cashtag, 5, 5) // \u53cd\u659c\u6760\u4e0d\u8ba1\u5165\uff08\u56e0\u4e3a\u5b83\u7528\u4e8e\u7f16\u8bd1\u5668\uff09\n}.send(user, bot)\n</code></pre>"},{"location":"zh/Actions/#_8","title":"\u4e0a\u4e0b\u6587\u5b9e\u4f53\u3002","text":"<p>\u5b9e\u4f53\u4e5f\u53ef\u4ee5\u901a\u8fc7\u67d0\u4e9b\u6784\u9020\u7684\u4e0a\u4e0b\u6587\u6dfb\u52a0\uff0c\u5b83\u4eec\u7528\u7279\u5b9a\u7684 EntitiesContextBuilder \u63a5\u53e3\u6807\u8bb0\uff0c\u5b83\u4e5f\u51fa\u73b0\u5728\u6807\u9898\u7279\u6027\u4e2d\u3002</p> <p>\u793a\u4f8b\u7528\u6cd5\uff1a</p> <pre><code>message { \"\u666e\u901a\u6587\u672c \" - bold { \"\u8fd9\u662f\u7c97\u4f53\u6587\u672c\" } - \" \u7ee7\u7eed\u666e\u901a\" }.send(user, bot)\n</code></pre> <p>\u6240\u6709\u7c7b\u578b\u7684 \u5b9e\u4f53\u7c7b\u578b \u90fd\u53d7\u652f\u6301\u3002</p>"},{"location":"zh/Actions/#_9","title":"\u6807\u9898","text":"<p>\u6b64\u5916\uff0c<code>caption</code> \u65b9\u6cd5\u53ef\u7528\u4e8e\u4e3a\u5a92\u4f53\u6587\u4ef6\u6dfb\u52a0\u6807\u9898\u3002</p> <p>\u793a\u4f8b\u7528\u6cd5\uff1a</p> <pre><code>photo { \"FILE_ID\" }.caption { \"\u6d4b\u8bd5\u6807\u9898\" }.send(user, bot)\n</code></pre>"},{"location":"zh/Actions/#_10","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>Bot \u4e0a\u4e0b\u6587</li> <li>FSM | \u5bf9\u8bdd\u5904\u7406</li> </ul>"},{"location":"zh/Activites-and-Processors/","title":"\u6d3b\u52a8\u4e0e\u5904\u7406\u5668","text":""},{"location":"zh/Activites-and-Processors/#_1","title":"\u4ecb\u7ecd","text":"<p>\u5728\u672c\u5e93\u7684\u672f\u8bed\u4e2d\uff0c<code>Activity</code> \u662f\u4e00\u4e2a\u62bd\u8c61\u5b9e\u4f53\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6982\u5ff5\uff0c\u4ee3\u8868\u4e86 <code>@CommandHandler</code>\u3001<code>@InputHandler</code>\u3001<code>@UnprocessedHandler</code> \u548c <code>@CommonHandler</code> \u7b49\u5b9e\u4f53\u7684\u6982\u62ec\u3002</p> <p>\u8fd8\u53ef\u4ee5\u67e5\u770b \u5904\u7406\u5668\u6587\u7ae0\u3002</p>"},{"location":"zh/Activites-and-Processors/#_2","title":"\u6536\u96c6\u6d3b\u52a8","text":"<p>\u6d3b\u52a8\u5728\u7f16\u8bd1\u65f6\u88ab\u6536\u96c6\u548c\u51c6\u5907\u6240\u6709\u4e0a\u4e0b\u6587\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u9650\u5236\u641c\u7d22\u5305\u7684\u533a\u57df\uff0c\u53ef\u4ee5\u5411\u63d2\u4ef6\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff1a</p> <pre><code>ktGram {\n    packages = listOf(\"com.example.mybot\")\n}\n</code></pre> <p>\u6216\u8005\u901a\u8fc7 ksp \u800c\u4e0d\u4f7f\u7528\u63d2\u4ef6\uff1a</p> <pre><code>ksp {\n    arg(\"package\", \"com.example.mybot\")\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u4f7f\u6536\u96c6\u7684\u64cd\u4f5c\u80fd\u591f\u6b63\u786e\u5904\u7406\uff0c\u60a8\u8fd8\u5fc5\u987b\u5728\u5b9e\u4f8b\u672c\u8eab\u4e2d\u6307\u5b9a\u5305\u3002</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\", \"com.example.mybot\")\n\n    bot.handleUpdates()\n    // \u542f\u52a8\u957f\u8f6e\u8be2\u76d1\u542c\u5668\n}\n</code></pre> <p>\u6b64\u9009\u9879\u7684\u6dfb\u52a0\u662f\u4e3a\u4e86\u80fd\u591f\u8fd0\u884c\u591a\u4e2a\u673a\u5668\u4eba\u5b9e\u4f8b\uff1a</p> <pre><code>ktGram {\n    packages = listOf(\"com.example.mybot\", \"com.example.mybot2\")\n}\n</code></pre> <p>\u6216\u8005\u5982\u679c\u60a8\u4e0d\u4f7f\u7528\u63d2\u4ef6\u6765\u6307\u5b9a\u4e0d\u540c\u7684\u5305\uff0c\u5219\u9700\u8981\u4f7f\u7528 <code>;</code> \u5206\u9694\u7b26\u6307\u5b9a\u5b83\u4eec\uff1a</p> <pre><code>ksp {\n    arg(\"package\", \"com.example.mybot;com.example.mybot2\")\n}\n</code></pre>"},{"location":"zh/Activites-and-Processors/#_3","title":"\u5904\u7406\u5668","text":"<p>\u60a8\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u6d41\u5904\u7406\u66f4\u65b0\uff1a</p>"},{"location":"zh/Activites-and-Processors/#_4","title":"\u529f\u80fd\u6027","text":"<p>\u60a8\u901a\u8fc7 lambda \u53c2\u6570\u51fd\u6570 <code>bot.handleUpdates() {}</code> \u6216\u901a\u8fc7 <code>bot.update.setListener</code> \u5efa\u7acb\u5904\u7406\u884c\u4e3a\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728 \u76f8\u5173\u6587\u7ae0 \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u529f\u80fd\u6027\u5904\u7406\u7684\u4fe1\u606f\u3002</p> <p>\u8bf7\u53c2\u89c1 <code>FunctionalHandlingDsl</code>\u3002</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates {\n         onMessage {\n             message { update.text }.send(update.user, bot)\n         }\n   }\n}\n</code></pre>"},{"location":"zh/Activites-and-Processors/#_5","title":"\u6ce8\u89e3","text":"<p>\u6ce8\u89e3\u53d6\u51b3\u4e8e\u6240\u9009\u7684\u5904\u7406\u6a21\u5f0f\uff1a</p>"},{"location":"zh/Activites-and-Processors/#webhooks","title":"Webhooks","text":"<p>\u5728\u60a8\u7684\u63a7\u5236\u5668\uff08\u6216\u5904\u7406 <code>webhook</code> \u7684\u5176\u4ed6\u5730\u65b9\uff09\uff0c\u60a8\u8c03\u7528: <code>bot.update.parseAndHandle(webhookString)</code></p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4f7f\u7528\u6ce8\u89e3\u5904\u7406\u5668\uff0c\u4f46\u5982\u679c\u60a8\u60f3\u8981\u4e00\u4e9b\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 <code>setBehaviour</code> \u8bbe\u7f6e\uff08\u5728\u63a7\u5236\u5668\u672c\u8eab\u4e2d\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5206\u914d\u884c\u4e3a\uff0c\u53ea\u9700\u5728\u914d\u7f6e\u671f\u95f4\u5206\u914d\u4e00\u6b21\u5373\u53ef\uff09\uff1a</p> <pre><code>bot.update.setBehaviour {\n   // ...\u5176\u4ed6\u64cd\u4f5c\n   update(it) // \u8fd0\u884c\u6ce8\u89e3\u5904\u7406\u5668\n}\n</code></pre>"},{"location":"zh/Activites-and-Processors/#_6","title":"\u957f\u8f6e\u8be2","text":"<p>\u8c03\u7528: <code>bot.handleUpdates()</code> \u6216\u901a\u8fc7 <code>bot.update.setListener { handle(it) }</code></p>"},{"location":"zh/Activites-and-Processors/#_7","title":"\u4e24\u8005","text":"<p>\u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528\u76f8\u540c\u7684 <code>setListener {}</code>\uff0c\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u5373\u4f7f\u76f8\u540c\u7684\u547d\u4ee4\u4e5f\u53ef\u4ee5\u88ab\u5904\u7406\u4e24\u6b21\uff0c\u5904\u7406\u5c06\u6309\u7167\u8c03\u7528\u7684\u987a\u5e8f\u8fdb\u884c\u3002</p> <p><pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\", \"eu.vendeli.samples.controller\")\n\n    bot.update.setListener {\n        handle(it) // \u5728\u8fd9\u91cc\u6211\u4eec\u53d1\u9001\u66f4\u65b0\u8fdb\u884c\u6ce8\u89e3\u5904\u7406\u3002\n        handle(it) { // \u5728\u8fd9\u91cc\u6211\u4eec\u968f\u540e\u8fdb\u884c\u529f\u80fd\u6027\u5904\u7406\u3002\n            onMessage {\n                message { update.text }.send(update.user, bot)\n            }\n        }\n}\n</code></pre> \u60a8\u53ef\u4ee5\u5728 \u6295\u7968\u793a\u4f8b \u4e2d\u770b\u5230\u7ed3\u5408\u4f7f\u7528\u7684\u793a\u4f8b\u3002</p> <p>\u6216\u8005\u5728 webhook \u5904\u7406\u65f6\uff0c\u60a8\u53ef\u4ee5\u50cf\u4e4b\u524d\u63cf\u8ff0\u7684\u90a3\u6837\u901a\u8fc7 <code>setBehaviour</code> \u8bbe\u7f6e\u3002</p>"},{"location":"zh/Activites-and-Processors/#_8","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u66f4\u65b0\u89e3\u6790</li> <li>\u6d3b\u52a8\u8c03\u7528</li> <li>\u52a8\u4f5c</li> </ul>"},{"location":"zh/Activity-invocation/","title":"\u6d3b\u52a8\u8c03\u7528","text":"<p>\u5728\u6d3b\u52a8\u8c03\u7528\u671f\u95f4\uff0c\u53ef\u4ee5\u4f20\u9012\u673a\u5668\u4eba\u4e0a\u4e0b\u6587\uff0c\u56e0\u4e3a\u5b83\u88ab\u58f0\u660e\u4e3a\u76ee\u6807\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u53c2\u6570\u3002</p> <p>\u53ef\u4ee5\u4f20\u9012\u7684\u53c2\u6570\u6709\uff1a</p> <ul> <li><code>ProcessedUpdate</code>\uff08\u53ca\u5176\u6240\u6709\u5b50\u7c7b\uff09 - \u5f53\u524d\u5904\u7406\u7684\u66f4\u65b0\u3002</li> <li><code>User</code> - \u5982\u679c\u5b58\u5728\u3002</li> <li><code>TelegramBot</code> - \u5f53\u524d\u7684\u673a\u5668\u4eba\u5b9e\u4f8b\u3002</li> </ul> <p>\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fdb\u884c\u4f20\u9012\u3002</p> <p>\u4e3a\u6b64\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5b9e\u73b0 <code>Autowiring&lt;T&gt;</code> \u7684\u7c7b\uff0c\u5e76\u7528 <code>@Injectable</code> \u6ce8\u89e3\u6807\u8bb0\u5b83\u3002</p> <p>\u5728\u5b9e\u73b0 <code>Autowiring</code> \u63a5\u53e3\u540e\uff0c<code>T</code> \u5c06\u53ef\u4ee5\u5728\u76ee\u6807\u51fd\u6570\u4e2d\u4f20\u9012\uff0c\u5e76\u901a\u8fc7\u63a5\u53e3\u4e2d\u63cf\u8ff0\u7684\u65b9\u6cd5\u83b7\u53d6\u3002</p> <pre><code>@Injectable\nobject UserResolver : Autowiring&lt;UserRecord&gt; {\n    override suspend fun get(update: ProcessedUpdate, bot: TelegramBot): UserRecord? {\n        return userRepository.getUser ByTgId(update.user.id)\n    }\n}\n</code></pre> <p>\u5728\u51fd\u6570\u4e2d\u58f0\u660e\u7684\u5176\u4ed6\u53c2\u6570\u5c06\u5728\u89e3\u6790\u7684\u53c2\u6570\u4e2d\u88ab\u641c\u7d22\u3002</p> <p>\u6b64\u5916\uff0c\u5728\u4f20\u9012\u65f6\uff0c\u89e3\u6790\u7684\u53c2\u6570\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u67d0\u4e9b\u7c7b\u578b\uff0c\u4ee5\u4e0b\u662f\u5b83\u4eec\u7684\u5217\u8868\uff1a</p> <ul> <li><code>String</code></li> <li><code>Integer</code></li> <li><code>Long</code></li> <li><code>Short</code></li> <li><code>Float</code></li> <li><code>Double</code></li> </ul> <p>\u6b64\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u53c2\u6570\u88ab\u58f0\u660e\u4f46\u7f3a\u5931\uff08\u4f8b\u5982\u5728\u89e3\u6790\u7684\u53c2\u6570\u4e2d\u6216 <code>Update</code> \u4e2d\u7f3a\u5c11 <code>User</code>\uff09\uff0c\u6216\u8005\u58f0\u660e\u7684\u7c7b\u578b\u4e0e\u51fd\u6570\u4e2d\u63a5\u6536\u5230\u7684\u53c2\u6570\u4e0d\u5339\u914d\uff0c<code>null</code> \u5c06\u88ab\u4f20\u9012\uff0c\u56e0\u6b64\u8bf7\u5c0f\u5fc3\u3002</p> <p>\u603b\u7ed3\u4e00\u4e0b\uff0c\u4e0b\u9762\u662f\u51fd\u6570\u53c2\u6570\u901a\u5e38\u662f\u5982\u4f55\u5f62\u6210\u7684\u793a\u4f8b\uff1a</p> <p> </p>"},{"location":"zh/Activity-invocation/#_1","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u66f4\u65b0\u89e3\u6790</li> <li>\u6d3b\u52a8\u4e0e\u5904\u7406\u5668</li> </ul>"},{"location":"zh/Bot-Context/","title":"\u673a\u5668\u4eba\u4e0a\u4e0b\u6587","text":"<p>\u673a\u5668\u4eba\u8fd8\u53ef\u4ee5\u901a\u8fc7 <code>User Data</code> \u548c <code>ClassData</code> \u63a5\u53e3\u63d0\u4f9b\u8bb0\u4f4f\u4e00\u4e9b\u6570\u636e\u7684\u80fd\u529b\u3002</p> <ul> <li><code>userData</code> \u662f\u7528\u6237\u7ea7\u522b\u7684\u6570\u636e\u3002</li> <li><code>classData</code> \u662f\u7c7b\u7ea7\u522b\u7684\u6570\u636e\uff0c\u5373\u6570\u636e\u5c06\u88ab\u5b58\u50a8\uff0c\u76f4\u5230\u7528\u6237\u79fb\u52a8\u5230\u4e0d\u540c\u7c7b\u4e2d\u7684\u547d\u4ee4\u6216\u8f93\u5165\u3002\uff08\u5728\u51fd\u6570\u6a21\u5f0f\u4e0b\uff0c\u5b83\u5c06\u50cf\u7528\u6237\u6570\u636e\u4e00\u6837\u5de5\u4f5c\uff09</li> </ul> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u7684\u5b9e\u73b0\u662f\u901a\u8fc7 <code>ConcurrentHashMap</code> \u8fdb\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 <code>User Data</code> \u548c <code>ClassData</code> \u63a5\u53e3\u4f7f\u7528\u60a8\u9009\u62e9\u7684\u6570\u636e\u5b58\u50a8\u5de5\u5177\u8fdb\u884c\u66f4\u6539\u3002</p> <p>Caution</p> <p>\u4e0d\u8981\u5fd8\u8bb0\u8fd0\u884c gradle <code>kspKotlin</code>/\u6216\u4efb\u4f55\u76f8\u5173\u7684 ksp \u4efb\u52a1\uff0c\u4ee5\u4f7f\u6240\u9700\u7684\u4ee3\u7801\u751f\u6210\u7ed1\u5b9a\u53ef\u7528\u3002</p> <p>\u8981\u66f4\u6539\uff0c\u60a8\u53ea\u9700\u5728\u60a8\u7684\u5b9e\u73b0\u4e0b\u653e\u7f6e <code>@CtxProvider</code> \u6ce8\u89e3\u5e76\u8fd0\u884c gradle ksp \u4efb\u52a1\uff08\u6216\u6784\u5efa\uff09\u3002</p> <pre><code>@CtxProvider\nclass MyRedis : UserData&lt;String&gt; {\n    // ...\n}\n</code></pre>"},{"location":"zh/Bot-Context/#_1","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u9996\u9875</li> <li>\u66f4\u65b0\u89e3\u6790</li> </ul>"},{"location":"zh/Bot-configuration/","title":"\u673a\u5668\u4eba\u914d\u7f6e","text":"<p>\u5e93\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u914d\u7f6e\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5728 <code>BotConfiguration</code> \u7c7b\u63cf\u8ff0\u4e2d\u67e5\u770b API \u53c2\u8003\u3002</p> <p>\u914d\u7f6e\u673a\u5668\u4eba\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a</p>"},{"location":"zh/Bot-configuration/#lambda","title":"\u914d\u7f6e\u5668 lambda","text":"<pre><code>// ...\nval bot = TelegramBot(\"BOT_TOKEN\") {\n  inputListener = RedisInputListenerImpl()\n  classManager = KoinClassManagerImpl()\n  logging {\n      botLogLevel = LogLvl.DEBUG\n  }\n}\n// ...\n</code></pre>"},{"location":"zh/Bot-configuration/#configloader","title":"ConfigLoader \u63a5\u53e3","text":"<p>\u8fd8\u53ef\u4ee5\u901a\u8fc7\u7279\u6b8a\u7684 <code>ConfigLoader</code> \u63a5\u53e3\u8fdb\u884c\u914d\u7f6e\uff0c \u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4ece\u5916\u90e8\u6e90\u52a0\u8f7d\u8bbe\u7f6e\uff08<code>properties</code>\u3001<code>\u547d\u4ee4\u884c\u53c2\u6570</code> \u7b49\uff09\u3002</p> <p>\u8be5\u63a5\u53e3\u7684\u5b9e\u73b0\u53ef\u4ee5\u901a\u8fc7\u4e8c\u7ea7\u6784\u9020\u51fd\u6570\u4f20\u9012\uff0c\u5b9e\u4f8b\u5c06\u76f8\u5e94\u5730\u8fdb\u884c\u914d\u7f6e\u3002</p> <pre><code>val bot = TelegramBot(ConfigLoaderImpl)\n</code></pre> <p>\u76ee\u524d\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u6a21\u5757\uff0c\u5982 <code>ktgram-config-env</code>\u3001<code>ktgram-config-toml</code>\u3002</p>"},{"location":"zh/Bot-configuration/#botconfiguration","title":"BotConfiguration \u6982\u8ff0","text":""},{"location":"zh/Bot-configuration/#botconfiguration_1","title":"BotConfiguration","text":"<p><code>BotConfiguration</code> \u7c7b\u662f\u914d\u7f6e\u673a\u5668\u4eba\u7684\u4e2d\u5fc3\u67a2\u7ebd\u3002\u5b83\u5305\u62ec\u7528\u4e8e\u8bc6\u522b\u673a\u5668\u4eba\u3001\u8bbe\u7f6e API \u4e3b\u673a\u3001\u786e\u5b9a\u673a\u5668\u4eba\u662f\u5426\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u8fd0\u884c\u3001\u5904\u7406\u8f93\u5165\u3001\u7ba1\u7406\u7c7b\u4ee5\u53ca\u63a7\u5236\u8f93\u5165\u81ea\u52a8\u5220\u9664\u7684\u5c5e\u6027\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u7528\u4e8e\u901f\u7387\u9650\u5236\u3001HTTP \u5ba2\u6237\u7aef\u914d\u7f6e\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u66f4\u65b0\u76d1\u542c\u548c\u547d\u4ee4\u89e3\u6790\u7684\u5185\u90e8\u5c5e\u6027\u3002</p>"},{"location":"zh/Bot-configuration/#_1","title":"\u5c5e\u6027","text":"<ul> <li><code>identifier</code>\uff1a\u5728\u591a\u673a\u5668\u4eba\u5904\u7406\u671f\u95f4\u8bc6\u522b\u4e0d\u540c\u7684\u673a\u5668\u4eba\u5b9e\u4f8b\u3002</li> <li><code>apiHost</code>\uff1aTelegram API \u7684\u4e3b\u673a\u3002</li> <li><code>isTestEnv</code>\uff1a\u6307\u793a\u673a\u5668\u4eba\u662f\u5426\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u6807\u5fd7\u3002</li> <li><code>inputListener</code>\uff1a\u8f93\u5165\u5904\u7406\u7c7b\u7684\u5b9e\u4f8b\u3002</li> <li><code>classManager</code>\uff1a\u7528\u4e8e\u83b7\u53d6\u7c7b\u7684\u7ba1\u7406\u5668\u3002</li> <li><code>inputAutoRemoval</code>\uff1a\u5728\u5904\u7406\u671f\u95f4\u8c03\u8282\u8f93\u5165\u70b9\u81ea\u52a8\u5220\u9664\u7684\u6807\u5fd7\u3002</li> <li><code>exceptionHandlingStrategy</code>\uff1a\u5b9a\u4e49\u5904\u7406\u5f02\u5e38\u7684\u7b56\u7565\u3002<ul> <li><code>CollectToChannel</code> - \u6536\u96c6\u5230 <code>TgUpdateHandler.caughtExceptions</code>\u3002</li> <li><code>Throw</code> - \u518d\u6b21\u629b\u51fa\u5e76\u7528 <code>TgException</code> \u5305\u88c5\u3002</li> <li><code>DoNothing</code> - \u4ec0\u4e48\u4e5f\u4e0d\u505a :)</li> <li><code>Handle</code> - \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u3002</li> </ul> </li> <li><code>throwExOnActionsFailure</code>\uff1a\u5f53\u4efb\u4f55\u673a\u5668\u4eba\u8bf7\u6c42\u5931\u8d25\u65f6\u629b\u51fa\u5f02\u5e38\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#_2","title":"\u914d\u7f6e\u5757","text":"<p><code>BotConfiguration</code> \u8fd8\u63d0\u4f9b\u4e86\u914d\u7f6e\u5176\u5185\u90e8\u7ec4\u4ef6\u7684\u51fd\u6570\uff1a</p> <ul> <li><code>httpClient(block: HttpConfiguration.() -&gt; Unit)</code>\uff1a\u914d\u7f6e HTTP \u5ba2\u6237\u7aef\u3002</li> <li><code>logging(block: LoggingConfiguration.() -&gt; Unit)</code>\uff1a\u914d\u7f6e\u65e5\u5fd7\u8bb0\u5f55\u3002</li> <li><code>rateLimiter(block: RateLimiterConfiguration.() -&gt; Unit)</code>\uff1a\u914d\u7f6e\u8bf7\u6c42\u9650\u5236\u3002</li> <li><code>updatesListener(block: UpdatesListenerConfiguration.() -&gt; Unit)</code>\uff1a\u914d\u7f6e\u66f4\u65b0\u76d1\u542c\u5668\u3002</li> <li><code>commandParsing(block: CommandParsingConfiguration.() -&gt; Unit)</code>\uff1a\u6307\u5b9a\u547d\u4ee4\u89e3\u6790\u6a21\u5f0f\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#_3","title":"\u76f8\u5173\u914d\u7f6e\u7c7b","text":""},{"location":"zh/Bot-configuration/#ratelimiterconfiguration","title":"RateLimiterConfiguration","text":"<p>\u914d\u7f6e\u5168\u5c40\u901f\u7387\u9650\u5236\u3002</p> <ul> <li><code>limits</code>\uff1a\u5168\u5c40\u901f\u7387\u9650\u5236\u3002</li> <li><code>mechanism</code>\uff1a\u7528\u4e8e\u901f\u7387\u9650\u5236\u7684\u673a\u5236\uff0c\u9ed8\u8ba4\u662f TokenBucket \u7b97\u6cd5\u3002</li> <li><code>exceededAction</code>\uff1a\u8d85\u51fa\u9650\u5236\u65f6\u5e94\u7528\u7684\u64cd\u4f5c\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#httpconfiguration","title":"HttpConfiguration","text":"<p>\u5305\u542b\u673a\u5668\u4eba\u7684 HTTP \u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u3002</p> <ul> <li><code>requestTimeoutMillis</code>\uff1a\u8bf7\u6c42\u8d85\u65f6\uff08\u6beb\u79d2\uff09\u3002</li> <li><code>connectTimeoutMillis</code>\uff1a\u8fde\u63a5\u8d85\u65f6\uff08\u6beb\u79d2\uff09\u3002</li> <li><code>socketTimeoutMillis</code>\uff1a\u5957\u63a5\u5b57\u8d85\u65f6\uff08\u6beb\u79d2\uff09\u3002</li> <li><code>maxRequestRetry</code>\uff1aHTTP \u8bf7\u6c42\u7684\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u3002</li> <li><code>retryStrategy</code>\uff1a\u91cd\u8bd5\u7b56\u7565\uff0c\u53ef\u81ea\u5b9a\u4e49\u3002</li> <li><code>retryDelay</code>\uff1a\u6bcf\u6b21\u91cd\u8bd5\u7684\u8d85\u65f6\u4e58\u6570\u3002</li> <li><code>proxy</code>\uff1aHTTP \u8c03\u7528\u7684\u4ee3\u7406\u8bbe\u7f6e\u3002</li> <li><code>additionalHeaders</code>\uff1a\u5e94\u7528\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u7684\u5934\u90e8\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#loggingconfiguration","title":"LoggingConfiguration","text":"<p>\u7ba1\u7406\u673a\u5668\u4eba\u64cd\u4f5c\u548c HTTP \u8bf7\u6c42\u7684\u65e5\u5fd7\u7ea7\u522b\u3002</p> <ul> <li><code>botLogLevel</code>\uff1a\u673a\u5668\u4eba\u64cd\u4f5c\u7684\u65e5\u5fd7\u7ea7\u522b\u3002</li> <li><code>httpLogLevel</code>\uff1aHTTP \u8bf7\u6c42\u7684\u65e5\u5fd7\u7ea7\u522b\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#updateslistenerconfiguration","title":"UpdatesListenerConfiguration","text":"<p>\u914d\u7f6e\u4e0e\u62c9\u53d6\u66f4\u65b0\u76f8\u5173\u7684\u53c2\u6570\u3002</p> <ul> <li><code>dispatcher</code>\uff1a\u7528\u4e8e\u6536\u96c6\u4f20\u5165\u66f4\u65b0\u7684\u8c03\u5ea6\u5668\u3002</li> <li><code>processingDispatcher</code>\uff1a\u7528\u4e8e\u5904\u7406\u66f4\u65b0\u7684\u8c03\u5ea6\u5668\u3002</li> <li><code>pullingDelay</code>\uff1a\u6bcf\u6b21\u62c9\u53d6\u8bf7\u6c42\u540e\u7684\u5ef6\u8fdf\u3002</li> <li><code>updatesPollingTimeout</code>\uff1a\u957f\u8f6e\u8be2\u673a\u5236\u7684\u8d85\u65f6\u9009\u9879\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#commandparsingconfiguration","title":"CommandParsingConfiguration","text":"<p>\u6307\u5b9a\u547d\u4ee4\u89e3\u6790\u7684\u53c2\u6570\u3002</p> <ul> <li><code>commandDelimiter</code>\uff1a\u547d\u4ee4\u548c\u53c2\u6570\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u3002</li> <li><code>parametersDelimiter</code>\uff1a\u53c2\u6570\u4e4b\u95f4\u7684 \u5206\u9694\u7b26\u3002</li> <li><code>parameterValueDelimiter</code>\uff1a\u53c2\u6570\u7684\u952e\u548c\u503c\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u3002</li> <li><code>restrictSpacesInCommands</code>\uff1a\u6307\u793a\u662f\u5426\u5c06\u547d\u4ee4\u4e2d\u7684\u7a7a\u683c\u89c6\u4e3a\u547d\u4ee4\u7684\u7ed3\u675f\u3002</li> <li><code>useIdentifierInGroupCommands</code>\uff1a\u4f7f\u7528\u673a\u5668\u4eba\u7684\u6807\u8bc6\u7b26\u6765\u5339\u914d\u5305\u542b @ \u7684\u547d\u4ee4\u3002</li> </ul>"},{"location":"zh/Bot-configuration/#_4","title":"\u793a\u4f8b\u914d\u7f6e","text":"<p>\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u914d\u7f6e\u673a\u5668\u4eba\u7684\u793a\u4f8b\uff1a</p> <pre><code>val bot = TelegramBot(\"TOKEN\") {\n    identifier = \"MyBot\"\n    apiHost = \"https://api.telegram.org\"\n    isTestEnv = true\n    inputListener = InputListenerMapImpl()\n    classManager = ClassManagerImpl()\n\n    httpClient {\n        requestTimeoutMillis = 5000L\n        connectTimeoutMillis = 3000L\n        socketTimeoutMillis = 2000L\n    }\n    logging {\n        botLogLevel = LogLvl.DEBUG\n        httpLogLevel = HttpLogLevel.BODY\n    }\n    updatesListener {\n        dispatcher = Dispatchers.IO\n        processingDispatcher = Dispatchers.Unconfined\n        pullingDelay = 1000L\n    }\n    commandParsing {\n        commandDelimiter = '*'\n        parametersDelimiter = '&amp;'\n        restrictSpacesInCommands = true\n    }\n}\n</code></pre> <p>\u6b64\u914d\u7f6e\u4e3a\u673a\u5668\u4eba\u8bbe\u7f6e\u4e86\u7279\u5b9a\u7684\u6807\u8bc6\u7b26\uff0c\u542f\u7528\u4e86\u6d4b\u8bd5\u73af\u5883\u6a21\u5f0f\uff0c\u914d\u7f6e\u4e86\u901f\u7387\u9650\u5236\u3001HTTP \u5ba2\u6237\u7aef\u8bbe\u7f6e\u3001\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u3001\u66f4\u65b0\u76d1\u542c\u5668\u53c2\u6570\u548c\u547d\u4ee4\u89e3\u6790\u89c4\u5219\u3002</p> <p>\u901a\u8fc7\u5229\u7528\u8fd9\u4e9b\u914d\u7f6e\u9009\u9879\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5fae\u8c03\u4ed6\u4eec\u7684\u673a\u5668\u4eba\u4ee5\u6ee1\u8db3\u7279\u5b9a\u8981\u6c42\uff0c\u5e76\u5728\u5404\u79cd\u64cd\u4f5c\u573a\u666f\u4e2d\u4f18\u5316\u6027\u80fd\u3002</p>"},{"location":"zh/F.A.Q/","title":"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54","text":""},{"location":"zh/F.A.Q/#_1","title":"\u5982\u4f55\u83b7\u53d6\u65b9\u6cd5\u7684\u54cd\u5e94\uff1f","text":"<p>\u8981\u83b7\u53d6\u54cd\u5e94\u5e76\u80fd\u591f\u8fdb\u884c\u64cd\u4f5c\uff0c\u60a8\u9700\u8981\u5728\u65b9\u6cd5\u672b\u5c3e\u4f7f\u7528 <code>sendReturning</code> \u800c\u4e0d\u662f <code>send</code>\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u8fd4\u56de <code>Response</code> \u7c7b\uff0c\u8be5\u7c7b\u5305\u542b\u54cd\u5e94\u3001\u6210\u529f\u6216\u5931\u8d25\uff0c\u60a8\u9700\u8981\u5904\u7406\u5931\u8d25\u6216\u4ec5\u8c03\u7528 <code>getOrNull()</code>\u3002</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\uff1a\u5904\u7406\u54cd\u5e94\u3002</p>"},{"location":"zh/F.A.Q/#spring-boot-devtools","title":"\u4f7f\u7528 <code>spring-boot-devtools</code> \u65f6\u51fa\u73b0\u9519\u8bef","text":"<p>\u8fd9\u53d1\u751f\u662f\u56e0\u4e3a <code>spring-boot-devtools</code> \u6709\u81ea\u5df1\u7684 <code>classloader</code>\uff0c\u5e76\u4e14\u627e\u4e0d\u5230\u65b9\u6cd5\u3002</p> <p>\u60a8\u9700\u8981\u5728 <code>resources/META-INF/spring-devtools.properties</code> \u4e2d\u6dfb\u52a0\uff1a</p> <pre><code>restart.include.generated=/eu.vendeli\n</code></pre>"},{"location":"zh/F.A.Q/#ktor","title":"\u5982\u4f55\u66f4\u6539 ktor \u5f15\u64ce","text":"<p>\u5982\u679c\u60a8\u60f3\u66f4\u6539\u5ba2\u6237\u7aef\u4f7f\u7528\u7684\u5f15\u64ce\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u66f4\u6539 \u53c2\u6570 \u5728 \u63d2\u4ef6\u8bbe\u7f6e \u4e2d\u3002</p>"},{"location":"zh/F.A.Q/#_2","title":"\u5982\u4f55\u4f7f\u7528\u6211\u559c\u6b22\u7684\u65e5\u5fd7\u63d0\u4f9b\u7a0b\u5e8f","text":"<p>\u8be5\u5e93\u4f7f\u7528 <code>slf4j-api</code>\uff0c\u8981\u4f7f\u7528\u6240\u9700\u7684\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u60a8\u53ea\u9700\u5c06\u5176\u6dfb\u52a0\u5230\u4f9d\u8d56\u9879\u4e2d\u3002</p> <p>\u5e93\u63d2\u4ef6\u4f1a\u81ea\u52a8\u68c0\u6d4b\u63d0\u4f9b\u7a0b\u5e8f\u7684\u4f7f\u7528\uff0c\u5982\u679c\u7f3a\u5931\uff0c\u5c06\u9ed8\u8ba4\u4f7f\u7528 <code>logback</code>\u3002</p>"},{"location":"zh/F.A.Q/#_3","title":"\u5728\u957f\u8f6e\u8be2\u5904\u7406\u7a0b\u5e8f\u4e2d\u6355\u83b7\u7f51\u7edc\u5f02\u5e38","text":"<p>\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4e0d\u7a33\u5b9a\u7684\u8fde\u63a5\u5e76\u9700\u8981\u6355\u83b7\u56e0\u6b64\u4ea7\u751f\u7684\u9519\u8bef\uff0c\u6216\u8bb8\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\uff1a</p> <pre><code>fun main() {\n    val bot = TelegramBot(\"TOKEN\")\n\n    try {\n        bot.handleUpdates()\n    } catch (e: Exception) {\n        // \u5982\u6709\u9700\u8981\uff0c\u5904\u7406\u5f02\u5e38\n\n        bot.update.stopListener()\n        bot.handleUpdates()\n    }\n}\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b spring-starter \u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002</p>"},{"location":"zh/FSM-and-Conversation-handling/","title":"FSM \u548c\u5bf9\u8bdd\u5904\u7406","text":"<p>\u8be5\u5e93\u8fd8\u652f\u6301 FSM \u673a\u5236\uff0c\u8fd9\u662f\u4e00\u79cd\u9010\u6b65\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u673a\u5236\uff0c\u5177\u6709\u9519\u8bef\u8f93\u5165\u5904\u7406\u529f\u80fd\u3002</p>"},{"location":"zh/FSM-and-Conversation-handling/#_1","title":"\u7406\u8bba\u4e0a","text":"<p>\u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e2a\u9700\u8981\u6536\u96c6\u7528\u6237\u8c03\u67e5\u7684\u60c5\u51b5\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u8be2\u95ee\u4e00\u4e2a\u4eba\u7684\u6240\u6709\u6570\u636e\uff0c\u4f46\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u8f93\u5165\u4e0d\u6b63\u786e\uff0c\u5bf9\u7528\u6237\u548c\u6211\u4eec\u6765\u8bf4\u90fd\u4f1a\u5f88\u56f0\u96be\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6b65\u9aa4\u53ef\u80fd\u4f1a\u6839\u636e\u67d0\u4e9b\u8f93\u5165\u6570\u636e\u6709\u6240\u4e0d\u540c\u3002</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u60f3\u8c61\u9010\u6b65\u8f93\u5165\u6570\u636e\u7684\u8fc7\u7a0b\uff0c\u673a\u5668\u4eba\u4e0e\u7528\u6237\u8fdb\u5165\u5bf9\u8bdd\u6a21\u5f0f\u3002</p> <p> </p> <p>\u7eff\u8272\u7bad\u5934\u8868\u793a\u65e0\u9519\u8bef\u5730\u901a\u8fc7\u6b65\u9aa4\u7684\u8fc7\u7a0b\uff0c\u84dd\u8272\u7bad\u5934\u8868\u793a\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u5e76\u7b49\u5f85\u91cd\u65b0\u8f93\u5165\uff08\u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u8868\u793a\u4ed6\u662f -100 \u5c81\uff0c\u5e94\u8be5\u518d\u6b21\u8be2\u95ee\u5e74\u9f84\uff09\uff0c\u7ea2\u8272\u7bad\u5934\u5219\u663e\u793a\u7531\u4e8e\u4efb\u4f55\u547d\u4ee4\u6216\u5176\u4ed6\u542b\u4e49\u7684\u53d6\u6d88\u800c\u9000\u51fa\u6574\u4e2a\u8fc7\u7a0b\u3002</p>"},{"location":"zh/FSM-and-Conversation-handling/#_2","title":"\u5b9e\u8df5\u4e2d","text":"<p>\u8fd9\u6837\u7684\u673a\u5236\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\u5728\u5e93\u4e2d\u5b9e\u73b0\uff0c\u8be5\u7c7b\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u5e76\u7528\u7279\u5b9a\u6ce8\u89e3 <code>@InputChain</code> \u6807\u8bb0\u3002</p> <pre><code>@InputChain\nobject ConversationChain {\n    object Name : BaseStatefulLink() {\n        override val breakCondition = BreakCondition { _, update, _ -&gt; update.text.isBlank() }\n        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {\n            message {\n                \"\u8bf7\u544a\u8bc9\u6211\u4f60\u7684\u540d\u5b57\uff0c\u56e0\u4e3a\u8fd9\u5c31\u662f\u6709\u793c\u8c8c\u7684\u4eba\u6240\u505a\u7684 :)\"\n            }.send(user, bot)\n        }\n\n        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {\n            message { \"\u54e6\uff0c${update.text}\uff0c\u4f60\u597d\" }.send(user, bot)\n            message { \"\u4f60\u591a\u5927\u4e86\uff1f\" }.send(user, bot)\n\n            return update.text\n        }\n    }\n\n    object Age : BaseStatefulLink() {\n        override val breakCondition = BreakCondition { _, update, _ -&gt; update.text.toIntOrNull() == null }\n        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {\n            message {\n                \"\u4e5f\u8bb8\u95ee\u4f60\u7684\u5e74\u9f84\u4e0d\u592a\u793c\u8c8c\uff0c\u4f46\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u544a\u8bc9\u6211\u3002\"\n            }.send(user, bot)\n        }\n\n        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {\n            message { \"\u5f88\u9ad8\u5174\u89c1\u5230\u4f60\uff01\" }.send(user, bot)\n\n            return update.text\n        }\n    }\n\n    object Final : ChainLink() {\n        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot) {\n            val state = user.getAllState(ConversationChain)\n\n            message {\n                \"\u6211\u8bb0\u6027\u4e0d\u597d\uff0c\u4f46\u6211\u8bb0\u4f4f\u4e86\u4f60\uff01 \" +\n                        \"\u4f60\u53eb ${state.Name}\uff0c\u4f60 ${state.Age} \u5c81\u3002\"\n            }.send(user, bot)\n        }\n    }\n}\n</code></pre> <p>\u5728\u6211\u4eec\u63cf\u8ff0\u4e86\u542f\u52a8\u5904\u7406\u7684\u673a\u5236\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8c03\u7528\u65b9\u6cd5\u5e76\u6307\u5b9a\u521d\u59cb\u6b65\u9aa4\uff0c\u7136\u540e\u5e93\u5c06\u81ea\u52a8\u9075\u5faa\u987a\u5e8f\u3002</p> <pre><code>bot.inputListener.setChain(user, Conversation.Name)\n</code></pre>"},{"location":"zh/FSM-and-Conversation-handling/#_3","title":"\u94fe\u63a5\u7ec6\u8282","text":"<p>\u6240\u6709\u94fe\u63a5\u90fd\u6709\u76f8\u540c\u7684\u57fa\u7840\uff0c\u5e76\u5b9e\u73b0 <code>Link&lt;T&gt;</code> \u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <p>\u5173\u952e\u5c5e\u6027\uff1a</p> <ul> <li>afterAction\uff1a\u5728\u4e3b\u8981\u64cd\u4f5c\u540e\u6267\u884c\u7684\u53ef\u9009\u64cd\u4f5c\u3002</li> <li>beforeAction\uff1a\u5728\u4e3b\u8981\u64cd\u4f5c\u524d\u6267\u884c\u7684\u53ef\u9009\u64cd\u4f5c\u3002</li> <li>breakCondition\uff1a\u5982\u679c\u6ee1\u8db3\uff0c\u5c06\u89e6\u53d1\u94fe\u4e2d\u65ad\u7684\u6761\u4ef6\u3002</li> <li>chainingStrategy\uff1a\u5b9a\u4e49\u5982\u4f55\u786e\u5b9a\u4e0b\u4e00\u4e2a\u94fe\u63a5\u3002</li> <li>retryAfterBreak\uff1a\u6307\u793a\u5728\u6ee1\u8db3\u4e2d\u65ad\u6761\u4ef6\u540e\u662f\u5426\u91cd\u8bd5\u64cd\u4f5c\u3002</li> </ul> <p>\u5173\u952e\u51fd\u6570\uff1a</p> <ul> <li>action\uff1a\u8fd9\u662f\u4e00\u4e2a\u62bd\u8c61\u51fd\u6570\uff0c\u5fc5\u987b\u5b9e\u73b0\u4ee5\u5b9a\u4e49\u94fe\u63a5\u7684\u4e3b\u8981\u884c\u4e3a\u3002</li> <li>breakAction\uff1a\u53ef\u9009\u51fd\u6570\uff0c\u53ef\u4ee5\u91cd\u5199\u4ee5\u5b9a\u4e49\u5728\u6ee1\u8db3\u4e2d\u65ad\u6761\u4ef6\u65f6\u7684\u884c\u4e3a\u3002</li> </ul> <p>\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u94fe\u63a5\uff0c\u5b83\u4eec\u6309\u72b6\u6001\u533a\u5206\uff0c\u65e0\u72b6\u6001\u548c\u6709\u72b6\u6001\uff1a</p>"},{"location":"zh/FSM-and-Conversation-handling/#_4","title":"\u65e0\u72b6\u6001\u94fe\u63a5","text":"<p>\u65e0\u72b6\u6001\u94fe\u63a5\u7531\u62bd\u8c61\u7c7b <code>ChainLink</code> \u8868\u793a\u3002\u6b64\u7c7b\u4f5c\u4e3a\u521b\u5efa\u4e0d\u5728\u7528\u6237\u4ea4\u4e92\u4e4b\u95f4\u7ef4\u62a4\u4efb\u4f55\u72b6\u6001\u4fe1\u606f\u7684\u94fe\u63a5\u7684\u57fa\u7840\u3002</p>"},{"location":"zh/FSM-and-Conversation-handling/#_5","title":"\u6709\u72b6\u6001\u94fe\u63a5","text":"<p><code>InputChain</code> \u673a\u5236\uff0c\u7279\u522b\u662f\u5728\u4f7f\u7528 <code>StatefulLink</code> \u53ca\u5176\u5404\u79cd\u5b9e\u73b0\u65f6\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u590d\u6742\u7684\u65b9\u6cd5\u6765\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8bdd\u72b6\u6001\uff0c\u4f8b\u5982\u804a\u5929\u673a\u5668\u4eba\u3002\u8be5\u7cfb\u7edf\u81ea\u52a8\u5b58 \u50a8\u4e0e\u6bcf\u4e2a\u72b6\u6001\u76f8\u5173\u8054\u7684 <code>action</code> \u51fd\u6570\u7684\u7ed3\u679c\uff0c\u5c06\u5176\u76f4\u63a5\u94fe\u63a5\u5230\u53c2\u4e0e\u4ea4\u4e92\u7684\u7528\u6237\uff08\u6216\u5176\u4ed6\u9009\u5b9a\u7684\u5173\u952e\uff09\u3002</p>"},{"location":"zh/FSM-and-Conversation-handling/#_6","title":"\u5173\u952e\u7279\u6027","text":""},{"location":"zh/FSM-and-Conversation-handling/#_7","title":"\u81ea\u52a8\u72b6\u6001\u5b58\u50a8","text":"<ul> <li>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728 <code>StatefulLink</code> \u4e2d\u6267\u884c\u7684 <code>action</code> \u51fd\u6570\u7684\u7ed3\u679c\u4f1a\u81ea\u52a8\u5b58\u50a8\u3002\u6b64\u5b58\u50a8\u4e0e\u7528\u6237\u76f8\u5173\u8054\uff0c\u786e\u4fdd\u57fa\u4e8e\u8fc7\u53bb\u7684\u4ea4\u6d41\u8fdb\u884c\u4e2a\u6027\u5316\u4ea4\u4e92\u3002</li> </ul>"},{"location":"zh/FSM-and-Conversation-handling/#_8","title":"\u53ef\u5b9a\u5236\u7684\u952e","text":"<ul> <li>\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u7075\u6d3b\u5730\u8986\u76d6\u57fa\u672c\u5b9e\u73b0\uff0c\u4ee5\u6307\u5b9a\u7528\u4e8e\u72b6\u6001\u5173\u8054\u7684\u81ea\u5b9a\u4e49\u952e\u3002\u8fd9\u53ef\u4ee5\u662f\u552f\u4e00\u6807\u8bc6\u804a\u5929\u4f1a\u8bdd\u7684\u6807\u8bc6\u7b26\uff0c\u4e5f\u53ef\u4ee5\u662f\u9002\u5408\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u7684\u4efb\u4f55\u5176\u4ed6\u76f8\u5173\u5c5e\u6027\u3002</li> </ul>"},{"location":"zh/FSM-and-Conversation-handling/#_9","title":"\u6570\u636e\u7c7b\u578b\u548c\u952e\u7684\u5229\u7528","text":"<ul> <li>\u57fa\u7840\u5b9e\u73b0 <code>BaseStatefulLink</code> \u5c06\u6570\u636e\u5206\u7c7b\u4e3a <code>String</code> \u7c7b\u578b\uff0c\u4f7f\u7528 <code>User .id</code> \u4f5c\u4e3a\u72b6\u6001\u5173\u8054\u7684\u4e3b\u952e\u3002\u8fd9\u79cd\u65b9\u6cd5\u7b80\u5316\u4e86\u6570\u636e\u7ba1\u7406\u548c\u68c0\u7d22\u8fc7\u7a0b\u3002</li> </ul>"},{"location":"zh/FSM-and-Conversation-handling/#_10","title":"\u7edf\u4e00\u8bbf\u95ee\u72b6\u6001","text":"<ul> <li>\u5982\u679c\u6240\u6709 <code>Link</code> \u5bf9\u8c61\u5728 InputChain \u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u952e\uff0c\u7cfb\u7edf\u4f1a\u751f\u6210\u51fd\u6570\u4ee5\u4fbf\u4e8e\u7edf\u4e00\u8bbf\u95ee\u6240\u6709\u72b6\u6001\u3002\u8fd9\u4e00\u589e\u5f3a\u663e\u8457\u7b80\u5316\u4e86\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0d\u540c\u90e8\u5206\u68c0\u7d22\u548c\u7ba1\u7406\u72b6\u6001\u4fe1\u606f\u7684\u8fc7\u7a0b\u3002</li> </ul>"},{"location":"zh/FSM-and-Conversation-handling/#_11","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"zh/FSM-and-Conversation-handling/#_12","title":"\u68c0\u7d22\u6240\u6709\u72b6\u6001","text":"<p>\u8981\u8bbf\u95ee\u4e0e\u7279\u5b9a\u94fe\u5173\u8054\u7684\u7ed9\u5b9a\u7528\u6237\u7684\u6240\u6709\u72b6\u6001\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u6cd5\uff1a <pre><code>user.getAllState(MyChain).LinkName\n</code></pre> \u6b64\u547d\u4ee4\u68c0\u7d22\u4e0e\u6307\u5b9a\u7684 <code>LinkName</code> \u76f8\u5173\u8054\u7684\u6570\u636e\uff0c\u63d0\u4f9b\u7528\u6237\u4ea4\u4e92\u5386\u53f2\u7684\u5168\u9762\u6982\u8ff0\u3002</p>"},{"location":"zh/FSM-and-Conversation-handling/#_13","title":"\u76f4\u63a5\u72b6\u6001\u8bbf\u95ee","text":"<p>\u6216\u8005\uff0c\u4e3a\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u94fe\u63a5\u672c\u8eab\u76f4\u63a5\u8bbf\u95ee\u72b6\u6001\uff1a <pre><code>Chain.LinkName.state.get(key)\n</code></pre> \u6216\u8005\uff0c\u5982\u679c\u5728\u5f53\u524d\u94fe\u4e2d\u67e5\u8be2\u72b6\u6001\uff0c\u53ef\u4ee5\u7701\u7565 <code>Chain.LinkName</code>\uff0c\u7b80\u5316\u8c03\u7528\u4e3a\uff1a <pre><code>state.get(key)\n</code></pre></p>"},{"location":"zh/FSM-and-Conversation-handling/#_14","title":"\u4f18\u52bf","text":"<p>\u8fd9\u79cd\u65b9\u6cd5\u4f7f\u5f97\u6570\u636e\u7ba1\u7406\u534f\u8bae\u66f4\u52a0\u4e25\u683c\uff0c\u63d0\u4f9b\u5feb\u901f\u4fbf\u6377\u7684\u5b58\u50a8\u72b6\u6001\u8bbf\u95ee\u3002\u5b83\u63d0\u9ad8\u4e86\u72b6\u6001\u68c0\u7d22\u548c\u64cd\u4f5c\u7684\u6548\u7387\uff0c\u4fc3\u8fdb\u4e86\u66f4\u6d41\u7545\u7684\u7528\u6237\u4f53\u9a8c\u3002</p> <p>\u9ed8\u8ba4\u7684 <code>BaseStatefulLink</code> \u5b9e\u73b0\u4f7f\u7528 <code>ConcurrentHashMap</code>\uff0c\u4f46\u5bf9\u4e8e\u4e25\u8083\u7684\u9879\u76ee\uff0c\u5efa\u8bae\u4f7f\u7528\u5176\u4ed6\u89e3\u51b3\u65b9\u6848 :)</p>"},{"location":"zh/FSM-and-Conversation-handling/#_15","title":"\u603b\u7ed3","text":"<p>\u53ef\u4ee5\u4f7f\u7528\u6240\u63d0\u51fa\u7684\u5de5\u5177\u4e0e\u4e0d\u540c\u7684\u53d8\u4f53\u521b\u5efa\u76f8\u5f53\u7075\u6d3b\u7684\u4ea4\u4e92\uff0c\u5982\u679c\u60a8\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u5728\u804a\u5929\u4e2d\u4e0e\u6211\u4eec\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5f88\u9ad8\u5174\u63d0\u4f9b\u5e2e\u52a9 :)</p>"},{"location":"zh/Functional-DSL/","title":"\u529f\u80fd\u6027 DSL","text":""},{"location":"zh/Functional-DSL/#_1","title":"\u5230 ~~\u65e0\u7a77~~ \u529f\u80fd\u5904\u7406\u53ca\u66f4\u8fdc\u7684\u5730\u65b9\uff01","text":"<p>\u5c3d\u7ba1\u4e0e\u673a\u5668\u4eba\u5de5\u4f5c\u7684\u57fa\u672c\u673a\u5236\u6d89\u53ca\u4f7f\u7528\u6ce8\u89e3\uff0c\u4f46\u8fd9\u5e76\u4e0d\u59a8\u788d\u4f7f\u7528\u529f\u80fd\u6027\u66f4\u65b0\u5904\u7406\u3002</p> <p>\u6b64\u5916\uff0c\u673a\u5668\u4eba\u7684\u63a5\u53e3\u7075\u6d3b\u6027\u8fd8\u5141\u8bb8\u60a8\u5c06\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u5408\u8d77\u6765\u3002</p>"},{"location":"zh/Functional-DSL/#dsl","title":"\u529f\u80fd\u5904\u7406 DSL","text":"<p>\u5728\u5927\u591a\u6570\u529f\u80fd\u5904\u7406\u65b9\u6cd5\u4e2d\uff0c\u652f\u6301\u7684 <code>Update</code> \u7c7b\u578b\u6709\u6240\u4e0d\u540c\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u4e0a\u8bbe\u7f6e\u76d1\u542c\u5668\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>suspend fun main() {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates() {\n        onChosenInlineResult {\n            println(\"\u83b7\u5f97\u7ed3\u679c ${update.chosenInlineResult.resultId} \u6765\u81ea ${update.user}\")\n        }\n    }\n}\n</code></pre>"},{"location":"zh/Functional-DSL/#_2","title":"\u547d\u4ee4\u548c\u8f93\u5165","text":"<p>\u4e5f\u53ef\u4ee5\u5904\u7406 <code>commands</code> \u548c <code>inputs</code>\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates() {\n            // \u5e38\u89c4\u547d\u4ee4\n        onCommand(\"/start\") {\n            message { \"\u4f60\u597d\" }.send(user, bot)\n        }\n        onCommand(\"\"\"(red|green|blue)\"\"\".toRegex()) {\n            message { \"\u4f60\u8f93\u5165\u4e86 ${update.text} \u989c\u8272\" }.send(user, bot)\n        }\n    }\n}\n</code></pre> <p>\u5728 <code>onCommand</code> \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u53c2\u6570\u4ee5 <code>Map&lt;String, String&gt;</code> \u683c\u5f0f\u4f20\u9012\uff0c \u6839\u636e\u914d\u7f6e\u9002\u5f53\u89e3\u6790\u3002</p>"},{"location":"zh/Functional-DSL/#_3","title":"\u8f93\u5165","text":"<p>\u4e5f\u53ef\u4ee5\u901a\u8fc7\u719f\u6089\u7684 <code>bot.inputListener</code> \u673a\u5236\u4f7f\u7528\u8f93\u5165\u3002</p> <p><pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\")\n\n    bot.handleUpdates() {\n            // \u5e38\u89c4\u547d\u4ee4\n        onCommand(\"/start\") {\n            message { \"\u4f60\u597d\uff0c\u4f60\u53eb\u4ec0\u4e48\u540d\u5b57\uff1f\" }.send(user, bot)\n            bot.inputListener[user] = \"testInput\"\n        }\n        onInput(\"testInput\") {\n            message { \"\u563f\uff0c\u5f88\u9ad8\u5174\u89c1\u5230\u4f60\uff0c${update.text}\" }.send(user, bot)\n        }\n    }\n}\n</code></pre> \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8f93\u5165\u94fe\uff1a <pre><code>inputChain(\"conversation\") {\n     message { \"\u5f88\u9ad8\u5174\u89c1\u5230\u4f60\uff0c${update.text}\" }.send(user, bot)\n     message { \"\u4f60\u6700\u559c\u6b22\u7684\u98df\u7269\u662f\u4ec0\u4e48\uff1f\" }.send(user, bot)\n}.breakIf({ update.text == \"peanut butter\" }) { // \u94fe\u4e2d\u65ad\u6761\u4ef6\n     message { \"\u54e6\uff0c\u592a\u7cdf\u7cd5\u4e86\uff0c\u6211\u5bf9\u5b83\u8fc7\u654f\u3002\" }.send(user, bot)\n     // \u5339\u914d\u65f6\u5c06\u5e94\u7528\u7684\u64cd\u4f5c\n}.andThen {\n     // \u5982\u679c\u4e2d\u65ad\u6761\u4ef6\u4e0d\u5339\u914d\uff0c\u5219\u4e0b\u4e00\u4e2a\u8f93\u5165\u70b9\n}\n</code></pre></p> <p>\u60a8\u53ef\u4ee5\u5728 <code>FunctionalHandlingDsl</code> \u7c7b\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u65b9\u6cd5\u7684\u4fe1\u606f\u3002</p> <p>Caution</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u5904\u7406\u5668\uff08\u529f\u80fd\u6027\u3001\u6ce8\u89e3\uff09\uff0c\u8f93\u5165\u53ef\u80fd\u4e0d\u4f1a\u5982\u9884\u671f\u90a3\u6837\u5de5\u4f5c\uff08\u6bcf\u4e2a\u5904\u7406\u5668\u5728\u5904\u7406\u540e\u4f1a\u6e05\u9664\u8f93\u5165\uff0c\u5982\u679c\u60a8\u60f3\u8981\u5176\u4ed6\u884c\u4e3a\uff0c\u8bf7\u66f4\u6539 inputAutoRemoval \u914d\u7f6e\uff09\u3002</p>"},{"location":"zh/Functional-DSL/#_4","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u52a8\u4f5c</li> <li>\u6709\u7528\u7684\u5de5\u5177\u548c\u63d0\u793a</li> </ul>"},{"location":"zh/Guards/","title":"\u4fdd\u62a4\u673a\u5236","text":""},{"location":"zh/Guards/#_1","title":"\u4ecb\u7ecd","text":"<p>\u4fdd\u62a4\u673a\u5236\u662f\u4e3a\u5f00\u53d1\u8005\u521b\u5efa\u673a\u5668\u4eba\u65f6\u7684\u91cd\u8981\u529f\u80fd\u3002\u8fd9\u4e9b\u4fdd\u62a4\u673a\u5236\u4f5c\u4e3a\u6267\u884c\u524d\u68c0\u67e5\uff0c\u51b3\u5b9a\u662f\u5426\u5e94\u8c03\u7528\u7279\u5b9a\u547d\u4ee4\u3002\u901a\u8fc7\u5b9e\u73b0\u8fd9\u4e9b\u68c0\u67e5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u589e\u5f3a\u673a\u5668\u4eba\u529f\u80fd\u3001\u5b89\u5168\u6027\u548c\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"zh/Guards/#_2","title":"\u6d3b\u52a8\u4fdd\u62a4\u7684\u76ee\u7684","text":"<p>\u6d3b\u52a8\u4fdd\u62a4\u7684\u4e3b\u8981\u76ee\u7684\u662f\u786e\u4fdd\u53ea\u6709\u6388\u6743\u7528\u6237\u6216\u7279\u5b9a\u6761\u4ef6\u89e6\u53d1\u6d3b\u52a8\u3002</p> <p>\u8fd9\u53ef\u4ee5\u9632\u6b62\u6ee5\u7528\uff0c\u7ef4\u62a4\u673a\u5668\u4eba\u7684\u5b8c\u6574\u6027\uff0c\u5e76\u7b80\u5316\u4ea4\u4e92\u3002</p>"},{"location":"zh/Guards/#_3","title":"\u5e38\u89c1\u7528\u4f8b","text":"<ol> <li>\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\uff1a\u786e\u4fdd\u53ea\u6709\u7279\u5b9a\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7279\u5b9a\u547d\u4ee4\u3002</li> <li>\u524d\u7f6e\u6761\u4ef6\u68c0\u67e5\uff1a\u5728\u6267\u884c\u6d3b\u52a8\u4e4b\u524d\u9a8c\u8bc1\u67d0\u4e9b\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff08\u4f8b\u5982\uff0c\u786e\u4fdd\u7528\u6237\u5904\u4e8e\u7279\u5b9a\u72b6\u6001\u6216\u4e0a\u4e0b\u6587\u4e2d\uff09\u3002</li> <li>\u4e0a\u4e0b\u6587\u4fdd\u62a4\uff1a\u6839\u636e\u5f53\u524d\u804a\u5929\u6216\u7528\u6237\u72b6\u6001\u505a\u51fa\u51b3\u7b56\u3002</li> </ol>"},{"location":"zh/Guards/#_4","title":"\u5b9e\u73b0\u7b56\u7565","text":"<p>\u5b9e\u73b0 Telegram \u547d\u4ee4\u4fdd\u62a4\u901a\u5e38\u6d89\u53ca\u7f16\u5199\u5c01\u88c5\u6bcf\u4e2a\u4fdd\u62a4\u903b\u8f91\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u5e38\u89c1\u7b56\u7565\uff1a</p> <ol> <li>\u7528\u6237\u89d2\u8272\u68c0\u67e5\uff1a</li> <li> <p>\u786e\u4fdd\u7528\u6237\u5728\u6267\u884c\u547d\u4ee4\u4e4b\u524d\u5177\u6709\u6240\u9700\u89d2\u8272\uff08\u4f8b\u5982\uff0c\u7ba1\u7406\u5458\u3001\u7248\u4e3b\uff09\u3002       <pre><code> override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n  // \u68c0\u67e5\u7528\u6237\u662f\u5426\u662f\u7ed9\u5b9a\u804a\u5929\u4e2d\u7684\u7ba1\u7406\u5458\n }\n</code></pre></p> </li> <li> <p>\u72b6\u6001\u9a8c\u8bc1\uff1a</p> </li> <li> <p>\u5728\u5141\u8bb8\u6267\u884c\u547d\u4ee4\u4e4b\u524d\u68c0\u67e5\u7528\u6237\u7684\u72b6\u6001\u3002      <pre><code>override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n   return bot.userData[user.id, \"data\"] == requiredState\n}\n</code></pre></p> </li> <li> <p>\u81ea\u5b9a\u4e49\u4fdd\u62a4\uff1a</p> </li> <li>\u6839\u636e\u7279\u5b9a\u8981\u6c42\u521b\u5efa\u81ea\u5b9a\u4e49\u903b\u8f91\u3002      <pre><code>override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n   // \u81ea\u5b9a\u4e49\u903b\u8f91\u4ee5\u786e\u5b9a\u662f\u5426\u5e94\u6267\u884c\u547d\u4ee4\n}\n</code></pre></li> </ol>"},{"location":"zh/Guards/#_5","title":"\u5c06\u4fdd\u62a4\u4e0e\u6d3b\u52a8\u96c6\u6210","text":"<p>\u8981\u5c06\u8fd9\u4e9b\u4fdd\u62a4\u4e0e\u60a8\u7684\u673a\u5668\u4eba\u547d\u4ee4\u96c6\u6210\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5728\u547d\u4ee4\u5904\u7406\u7a0b\u5e8f\u88ab\u8c03\u7528\u4e4b\u524d\u68c0\u67e5\u8fd9\u4e9b\u6761\u4ef6\u7684\u4fdd\u62a4\u3002</p>"},{"location":"zh/Guards/#_6","title":"\u5b9e\u73b0\u793a\u4f8b","text":"<pre><code>// \u5728\u67d0\u5904\u5b9a\u4e49\u60a8\u7684\u4fdd\u62a4\u7c7b\uff0c\u5b9e\u73b0 Guard \u63a5\u53e3\nobject YourGuard : Guard {\n    override suspend fun condition(user: User?, update: ProcessedUpdate, bot: TelegramBot): Boolean {\n        // \u5728\u6b64\u7f16\u5199\u60a8\u7684\u6761\u4ef6\n    }\n}\n\n// ...\n\n@CommandHandler([\"yourCommand\"])\n@Guard(YourGuard::class) // \u4e5f\u652f\u6301 InputHandler\nfun command(bot: TelegramBot) {\n   // \u547d\u4ee4\u4e3b\u4f53\n}\n</code></pre>"},{"location":"zh/Guards/#_7","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>\u6a21\u5757\u5316\uff1a\u4fdd\u6301\u4fdd\u62a4\u903b\u8f91\u6a21\u5757\u5316\uff0c\u5e76\u4e0e\u6d3b\u52a8\u5206\u5f00\u3002</li> <li>\u53ef\u91cd\u7528\u6027\uff1a\u7f16\u5199\u53ef\u91cd\u7528\u7684\u4fdd\u62a4\u51fd\u6570\uff0c\u53ef\u4ee5\u8f7b\u677e\u5e94\u7528\u4e8e\u4e0d\u540c\u7684\u547d\u4ee4/\u8f93\u5165\u3002</li> <li>\u6548\u7387\uff1a\u4f18\u5316\u4fdd\u62a4\u68c0\u67e5\u4ee5\u6700\u5c0f\u5316\u6027\u80fd\u5f00\u9500\u3002</li> <li>\u7528\u6237\u53cd\u9988\uff1a\u5f53\u547d\u4ee4\u88ab\u4fdd\u62a4\u963b\u6b62\u65f6\uff0c\u5411\u7528\u6237\u63d0\u4f9b\u6e05\u6670\u7684\u53cd\u9988\u3002</li> </ul>"},{"location":"zh/Guards/#_8","title":"\u7ed3\u8bba","text":"<p>\u6d3b\u52a8\u4fdd\u62a4\u662f\u7ba1\u7406\u673a\u5668\u4eba\u547d\u4ee4/\u8f93\u5165\u6267\u884c\u7684\u5f3a\u5927\u5de5\u5177\u3002</p> <p>\u901a\u8fc7\u5b9e\u73b0\u5f3a\u5927\u7684\u4fdd\u62a4\u673a\u5236\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u786e\u4fdd\u4ed6\u4eec\u7684\u673a\u5668\u4eba\u5b89\u5168\u9ad8\u6548\u5730\u8fd0\u884c\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"zh/Guards/#_9","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u6d3b\u52a8\u4e0e\u5904\u7406\u5668</li> <li>\u66f4\u65b0\u89e3\u6790</li> <li>\u52a8\u4f5c</li> <li>\u6d3b\u52a8\u8c03\u7528</li> </ul>"},{"location":"zh/Handlers/","title":"\u5904\u7406\u5668","text":""},{"location":"zh/Handlers/#_1","title":"\u5904\u7406\u5668\u7684\u591a\u6837\u6027","text":"<p>\u5728\u673a\u5668\u4eba\u5f00\u53d1\u4e2d\uff0c\u7279\u522b\u662f\u5728\u6d89\u53ca\u7528\u6237\u4ea4\u4e92\u7684\u7cfb\u7edf\u4e2d\uff0c\u6709\u6548\u5730\u7ba1\u7406\u548c\u5904\u7406\u547d\u4ee4\u548c\u4e8b\u4ef6\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u8fd9\u4e9b\u6ce8\u89e3\u6807\u8bb0\u4e86\u65e8\u5728\u5904\u7406\u7279\u5b9a\u547d\u4ee4\u3001\u8f93\u5165\u6216\u66f4\u65b0\u7684\u51fd\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u8bf8\u5982\u547d\u4ee4\u5173\u952e\u5b57\u3001\u4f5c\u7528\u57df\u548c\u4fdd\u62a4\u673a\u5236\u7b49\u5143\u6570\u636e\u3002</p>"},{"location":"zh/Handlers/#_2","title":"\u6ce8\u89e3\u6982\u8ff0","text":""},{"location":"zh/Handlers/#commandhandler","title":"CommandHandler","text":"<p><code>CommandHandler</code> \u6ce8\u89e3\u7528\u4e8e\u6807\u8bb0\u5904\u7406\u7279\u5b9a\u547d\u4ee4\u7684\u51fd\u6570\u3002\u6b64\u6ce8\u89e3\u5305\u62ec\u5b9a\u4e49\u547d\u4ee4\u5173\u952e\u5b57\u548c\u4f5c\u7528\u57df\u7684\u5c5e\u6027\u3002</p> <ul> <li>value\uff1a\u6307\u5b9a\u4e0e\u547d\u4ee4\u76f8\u5173\u8054\u7684\u5173\u952e\u5b57\u3002</li> <li>scope\uff1a\u786e\u5b9a\u68c0\u67e5\u547d\u4ee4\u7684\u4e0a\u4e0b\u6587\u6216\u4f5c\u7528\u57df\u3002</li> </ul> <pre><code>@CommandHandler([\"text\"])\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#commandhandlercallbackquery","title":"CommandHandler.CallbackQuery","text":"<p><code>CommandHandler</code> \u6ce8\u89e3\u7684\u4e00\u4e2a\u4e13\u7528\u7248\u672c\uff0c\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u56de\u8c03\u67e5\u8be2\u3002\u5b83\u5305\u62ec\u4e0e <code>CommandHandler</code> \u76f8\u4f3c\u7684\u5c5e\u6027\uff0c\u91cd\u70b9\u5173\u6ce8\u4e0e\u56de\u8c03\u76f8\u5173\u7684\u547d\u4ee4\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5b83\u4e0e\u4ec5\u4f7f\u7528 <code>@CommandHandler</code> \u5e76\u9884\u8bbe <code>UpdateType.CALLBACK_QUERY</code> \u4f5c\u7528\u57df\u662f\u76f8\u540c\u7684\u3002</p> <ul> <li>value\uff1a\u6307\u5b9a\u4e0e\u547d\u4ee4\u76f8\u5173\u8054\u7684\u5173\u952e\u5b57\u3002</li> <li>autoAnswer\uff1a\u81ea\u52a8\u56de\u590d <code>callbackQuery</code>\uff08\u5728\u5904\u7406\u4e4b\u524d\u8c03\u7528 <code>answerCallbackQuery</code>\uff09\u3002</li> </ul> <pre><code>@CommandHandler.CallbackQuery([\"text\"])\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#commonhandler","title":"CommonHandler","text":"<p><code>CommonHandler</code> \u6ce8\u89e3\u65e8\u5728\u5904\u7406\u4f18\u5148\u7ea7\u4f4e\u4e8e <code>CommandHandler</code> \u548c <code>InputHandler</code> \u7684\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5b83\u5728\u6e90\u7ea7\u522b\u4f7f\u7528\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u5e38\u89c1\u547d\u4ee4\u5904\u7406\u5668\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4f18\u5148\u7ea7\u4ec5\u5728 <code>@CommonHandler</code> \u5185\u90e8\u6709\u6548\uff08\u5373\u4e0d\u5f71\u54cd\u5176\u4ed6\u5904\u7406\u5668\uff09\u3002</p>"},{"location":"zh/Handlers/#commonhandlertext","title":"CommonHandler.Text","text":"<p>\u6b64\u6ce8\u89e3\u6307\u5b9a\u4e0e\u66f4\u65b0\u5339\u914d\u7684\u6587\u672c\u3002\u5b83\u5305\u62ec\u5b9a\u4e49\u5339\u914d\u6587\u672c\u3001\u8fc7\u6ee4\u6761\u4ef6\u3001\u4f18\u5148\u7ea7\u548c\u4f5c\u7528\u57df\u7684\u5c5e\u6027\u3002</p> <ul> <li>value\uff1a\u8981\u4e0e\u4f20\u5165\u66f4\u65b0\u5339\u914d\u7684\u6587\u672c\u3002</li> <li>filter\uff1a\u5b9a\u4e49\u5728\u5339\u914d\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u6761\u4ef6\u7684\u7c7b\u3002</li> <li>priority\uff1a\u5904\u7406\u5668\u7684\u4f18\u5148\u7ea7\u7ea7\u522b\uff0c0 \u4e3a\u6700\u9ad8\u4f18\u5148\u7ea7\u3002</li> <li>scope\uff1a\u68c0\u67e5\u6587\u672c\u5339\u914d\u7684\u4e0a\u4e0b\u6587\u6216\u4f5c\u7528\u57df\u3002</li> </ul> <pre><code>@CommonHandler.Text([\"text\"], filter = isNewUser Filter::class, priority = 10)\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#commonhandlerregex","title":"CommonHandler.Regex","text":"<p>\u4e0e <code>CommonHandler.Text</code> \u7c7b\u4f3c\uff0c\u6b64\u6ce8\u89e3\u7528\u4e8e\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u66f4\u65b0\u3002\u5b83\u5305\u62ec\u5b9a\u4e49\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u3001\u9009\u9879\u3001\u8fc7\u6ee4\u6761\u4ef6\u3001\u4f18\u5148\u7ea7\u548c\u4f5c\u7528\u57df\u7684\u5c5e\u6027\u3002</p> <ul> <li>value\uff1a\u7528\u4e8e\u5339\u914d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u3002</li> <li>options\uff1a\u4fee\u6539\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u884c\u4e3a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u9009\u9879\u3002</li> <li>filter\uff1a\u5b9a\u4e49\u5728\u5339\u914d\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u6761\u4ef6\u7684\u7c7b\u3002</li> <li>priority\uff1a\u5904\u7406\u5668\u7684\u4f18\u5148\u7ea7\u7ea7\u522b\uff0c0 \u4e3a\u6700\u9ad8\u4f18\u5148\u7ea7\u3002</li> <li>scope\uff1a\u68c0\u67e5\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u4e0a\u4e0b\u6587\u6216\u4f5c\u7528\u57df\u3002</li> </ul> <pre><code>@CommonHandler.Regex(\"^&lt;br/&gt;d+$\", scope = [UpdateType.EDITED_MESSAGE])\nsuspend fun test(update: EditedMessageUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#inputhandler","title":"InputHandler","text":"<p><code>InputHandler</code> \u6ce8\u89e3\u6807\u8bb0\u5904\u7406\u7279\u5b9a\u8f93\u5165\u4e8b\u4ef6\u7684\u51fd\u6570\u3002\u5b83\u65e8\u5728\u5904\u7406\u8fd0\u884c\u65f6\u7684\u8f93\u5165\uff0c\u5e76\u5305\u62ec\u5b9a\u4e49\u8f93\u5165\u5173\u952e\u5b57\u548c\u4f5c\u7528\u57df\u7684\u5c5e\u6027\u3002</p> <ul> <li>value\uff1a\u6307\u5b9a\u4e0e\u8f93\u5165\u4e8b\u4ef6\u76f8\u5173\u8054\u7684\u5173\u952e\u5b57\u3002</li> </ul> <pre><code>@InputHandler(\"text\")\nsuspend fun test(update: ProcessedUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#unprocessedhandler","title":"UnprocessedHandler","text":"<p><code>UnprocessedHandler</code> \u6ce8\u89e3\u7528\u4e8e\u6807\u8bb0\u5904\u7406\u672a\u88ab\u5176\u4ed6\u5904\u7406\u5668\u5904\u7406\u7684\u66f4\u65b0\u7684\u51fd\u6570\u3002\u5b83\u786e\u4fdd\u4efb\u4f55\u672a\u5904\u7406\u7684\u66f4\u65b0\u90fd\u5f97\u5230\u9002\u5f53\u7ba1\u7406\uff0c\u5e76\u4e14\u6b64\u5904\u7406\u5668\u7c7b\u578b\u4ec5\u5141\u8bb8\u4e00\u4e2a\u5904\u7406\u70b9\u3002</p> <pre><code>@UnprocessedHandler\nsuspend fun test(update: ProcessedUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#updatehandler","title":"UpdateHandler","text":"<p><code>UpdateHandler</code> \u6ce8\u89e3\u6807\u8bb0\u5904\u7406\u7279\u5b9a\u7c7b\u578b\u7684\u4f20\u5165\u66f4\u65b0\u7684\u51fd\u6570\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7cfb\u7edf\u5316\u5730\u5206\u7c7b\u548c\u5904\u7406\u4e0d\u540c\u66f4\u65b0\u7c7b\u578b\u7684\u65b9\u6cd5\u3002</p> <ul> <li>type\uff1a\u6307\u5b9a\u5904\u7406\u5668\u51fd\u6570\u5c06\u5904\u7406\u7684\u66f4\u65b0\u7c7b\u578b\u3002</li> </ul> <pre><code>@UpdateHandler([UpdateType.PRE_CHECKOUT_QUERY])\nsuspend fun test(update: PreCheckoutQueryUpdate, user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#_3","title":"\u5904\u7406\u5668\u4f34\u968f\u6ce8\u89e3","text":"<p>\u8fd8\u6709\u4e00\u4e9b\u9644\u52a0\u6ce8\u89e3\u662f\u53ef\u9009\u7684\uff0c\u8865\u5145\u4e86\u5904\u7406\u5668\u672c\u8eab\u7684\u53ef\u9009\u884c\u4e3a\u3002</p> <p>\u5b83\u4eec\u53ef\u4ee5\u653e\u7f6e\u5728\u5e94\u7528\u5904\u7406\u5668\u7684\u51fd\u6570\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u653e\u7f6e\u5728\u7c7b\u4e0a\uff0c\u5728\u540e\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5c06\u81ea\u52a8\u5e94\u7528\u4e8e\u8be5\u7c7b\u4e2d\u7684\u6240\u6709\u5904\u7406\u5668\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u4e3a\u67d0\u4e9b\u51fd\u6570\u5177\u6709\u5355\u72ec\u7684\u884c\u4e3a\u3002</p> <p>\u5373\uff0c\u5e94\u7528\u7684\u4f18\u5148\u7ea7\u4e3a <code>Function</code> &gt; <code>Class</code>\uff0c\u5176\u4e2d\u51fd\u6570\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002</p>"},{"location":"zh/Handlers/#_4","title":"\u901f\u7387\u9650\u5236","text":"<p>\u6b64\u5916\uff0c\u8ba9\u6211\u4eec\u8fd8\u62ab\u9732\u5728\u6ce8\u89e3\u4e2d\u63cf\u8ff0\u7684\u901f\u7387\u9650\u5236\u673a\u5236\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u7528\u6237\u8bbe\u7f6e\u4e00\u822c\u9650\u5236\uff1a</p> <pre><code>// ...\nval bot = TelegramBot(\"BOT_TOKEN\") {\n    rateLimiter { // \u4e00\u822c\u9650\u5236\n        limits = RateLimits(period = 10000, rate = 5)\n    }\n}\n</code></pre>"},{"location":"zh/Handlers/#_5","title":"\u5904\u7406\u5668\u7279\u5b9a","text":"<p>\u53ef\u4ee5\u4f7f\u7528 <code>RateLimits</code> \u6ce8\u89e3\u5b9a\u4e49\u67d0\u4e9b\u64cd\u4f5c\u7684\u9650\u5236\uff0c\u652f\u6301 <code>@CommandHandler</code>\u3001<code>@CommandHandler.CallbackQuery</code>\u3001<code>@InputHandler</code>\u3001<code>@CommonHandler</code>\u3002</p> <pre><code>@CommandHandler([\"/start\"])\n@RateLimits(period = 1000L, rate = 1L)\nsuspend fun start(user: User, bot: TelegramBot) {\n    // ...\n}\n</code></pre>"},{"location":"zh/Handlers/#_6","title":"\u4fdd\u62a4\u673a\u5236","text":"<p>\u60a8\u53ef\u4ee5\u5355\u72ec\u5b9a\u4e49\u4fdd\u62a4\u673a\u5236\u4ee5\u63a7\u5236\u5bf9\u5904\u7406\u5668\u7684\u8bbf\u95ee\uff0c\u652f\u6301 <code>@CommandHandler</code>\u3001<code>@CommandHandler.CallbackQuery</code>\u3001<code>@InputHandler</code>\uff1a</p> <pre><code>@CommandHandler([\"text\"])\n@Guard(isAdminGuard::class)\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre>"},{"location":"zh/Handlers/#_7","title":"\u53c2\u6570\u89e3\u6790\u5668","text":"<p>\u60a8\u53ef\u4ee5\u5355\u72ec\u5b9a\u4e49\u81ea\u5b9a\u4e49\u53c2\u6570\u89e3\u6790\u5668\uff0c\u4ee5\u66f4\u6539\u5904\u7406\u5668\u7684\u53c2\u6570\u89e3\u6790\u884c\u4e3a\uff0c\u652f\u6301 <code>@CommandHandler</code>\u3001<code>@CommandHandler.CallbackQuery</code>\u3001<code>@CommonHandler</code>\uff1a</p> <pre><code>@CommandHandler([\"text\"])\n@ArgParser(SpaceArgParser::class)\nsuspend fun test(user: User, bot: TelegramBot) {\n    //...\n}\n</code></pre> <p>\u53e6\u8bf7\u53c2\u89c1 <code>defaultArgParser</code></p>"},{"location":"zh/Handlers/#_8","title":"\u7ed3\u8bba","text":"<p>\u8fd9\u4e9b\u6ce8\u89e3\u4e3a\u5904\u7406\u547d\u4ee4\u3001\u8f93\u5165\u548c\u4e8b\u4ef6\u63d0\u4f9b\u4e86\u5f3a\u5927\u800c\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u540c\u65f6\u5141\u8bb8\u5355\u72ec\u914d\u7f6e\u901f\u7387\u9650\u5236\u548c\u4fdd\u62a4\u673a\u5236\uff0c\u589e\u5f3a\u4e86\u673a\u5668\u4eba\u5f00\u53d1\u7684\u6574\u4f53\u7ed3\u6784\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p>"},{"location":"zh/Handlers/#_9","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u6d3b\u52a8\u4e0e\u5904\u7406\u5668</li> <li>\u6d3b\u52a8\u8c03\u7528</li> <li>\u6709\u9650\u72b6\u6001\u673a\u548c\u5bf9\u8bdd\u5904\u7406</li> <li>\u66f4\u65b0\u89e3\u6790</li> </ul>"},{"location":"zh/Update-parsing/","title":"\u66f4\u65b0\u89e3\u6790","text":""},{"location":"zh/Update-parsing/#_1","title":"\u6587\u672c\u8d1f\u8f7d","text":"<p>\u67d0\u4e9b\u66f4\u65b0\u53ef\u80fd\u5177\u6709\u53ef\u4ee5\u89e3\u6790\u4ee5\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\u7684\u6587\u672c\u8d1f\u8f7d\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u4eec\uff1a</p> <ul> <li><code>MessageUpdate</code> -&gt; <code>message.text</code></li> <li><code>EditedMessageUpdate</code> -&gt; <code>editedMessage.text</code></li> <li><code>ChannelPostUpdate</code> -&gt; <code>channelPost.text</code></li> <li><code>EditedChannelPostUpdate</code> -&gt; <code>editedChannelPost.text</code></li> <li><code>InlineQueryUpdate</code> -&gt; <code>inlineQuery.query</code></li> <li><code>ChosenInlineResultUpdate</code> -&gt; <code>chosenInlineResult.query</code></li> <li><code>CallbackQueryUpdate</code> -&gt; <code>callbackQuery.data</code></li> <li><code>ShippingQueryUpdate</code> -&gt; <code>shippingQuery.invoicePayload</code></li> <li><code>PreCheckoutQueryUpdate</code> -&gt; <code>preCheckoutQuery.invoicePayload</code></li> <li><code>PollUpdate</code> -&gt; <code>poll.question</code></li> <li><code>PurchasedPaidMediaUpdate</code> -&gt; <code>purchasedPaidMedia.paidMediaPayload</code></li> </ul> <p>\u4ece\u5217\u51fa\u7684\u66f4\u65b0\u4e2d\uff0c\u9009\u62e9\u67d0\u4e2a\u53c2\u6570\u5e76\u4f5c\u4e3a <code>TextReference</code> \u8fdb\u884c\u8fdb\u4e00\u6b65\u89e3\u6790\u3002</p>"},{"location":"zh/Update-parsing/#_2","title":"\u89e3\u6790","text":"<p>\u6240\u9009\u53c2\u6570\u4f7f\u7528\u9002\u5f53\u914d\u7f6e\u7684\u5206\u9694\u7b26\u89e3\u6790\u4e3a\u547d\u4ee4\u53ca\u5176\u53c2\u6570\u3002</p> <p>\u8bf7\u53c2\u89c1\u914d\u7f6e <code>commandParsing</code> \u5757\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u56fe\u8868\u4e2d\u770b\u5230\u54ea\u4e9b\u7ec4\u4ef6\u6620\u5c04\u5230\u76ee\u6807\u51fd\u6570\u7684\u54ea\u4e9b\u90e8\u5206\u3002</p> <p> </p>"},{"location":"zh/Update-parsing/#parammapping","title":"@ParamMapping","text":"<p>\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a <code>@ParamMapping</code> \u7684\u6ce8\u89e3\uff0c\u7528\u4e8e\u65b9\u4fbf\u6216\u7279\u6b8a\u60c5\u51b5\u3002</p> <p>\u5b83\u5141\u8bb8\u60a8\u5c06\u4f20\u5165\u6587\u672c\u4e2d\u7684\u53c2\u6570\u540d\u79f0\u6620\u5c04\u5230\u4efb\u4f55\u53c2\u6570\u3002</p> <p>\u5f53\u60a8\u7684\u4f20\u5165\u6570\u636e\u6709\u9650\u65f6\uff0c\u4f8b\u5982 <code>CallbackData</code>\uff0864 \u4e2a\u5b57\u7b26\uff09\uff0c\u8fd9\u4e5f\u5f88\u65b9\u4fbf\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a <code>greeting?name=Adam</code></p> <pre><code>@CommandHandler([\"greeting\"])\nsuspend fun greeting(@ParamMapping(\"name\") anyParameterName: String, user: User, bot: TelegramBot) {\n    message { \"\u4f60\u597d\uff0c$anyParameterName\" }.send(to = user, via = bot)\n}\n</code></pre> <p>\u5b83\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6355\u83b7\u672a\u547d\u540d\u7684\u53c2\u6570\uff0c\u5728\u89e3\u6790\u5668\u8bbe\u7f6e\u4e3a\u8df3\u8fc7\u53c2\u6570\u540d\u79f0\u6216\u751a\u81f3\u7f3a\u5c11\u53c2\u6570\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u53c2\u6570\u5c06\u4ee5 'param_n' \u6a21\u5f0f\u4f20\u9012\uff0c\u5176\u4e2d <code>n</code> \u662f\u5176\u5e8f\u53f7\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u6587\u672c - <code>myCommand?p1=v1&amp;v2&amp;p3=&amp;p4=v4&amp;p5=</code>\uff0c\u5c06\u88ab\u89e3\u6790\u4e3a\uff1a * \u547d\u4ee4 - <code>myCommand</code> * \u53c2\u6570   * <code>p1</code> = <code>v1</code>   * <code>param_2</code> = <code>v2</code>   * <code>p3</code> = <code>* `p4` = `v4`   * `p5` =</code></p> <p>\u5982\u60a8\u6240\u89c1\uff0c\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6ca1\u6709\u58f0\u660e\u540d\u79f0\uff0c\u56e0\u6b64\u8868\u793a\u4e3a <code>param_2</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728\u56de\u8c03\u4e2d\u7f29\u5199\u53d8\u91cf\u540d\u79f0\uff0c\u5e76\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u6e05\u6670\u53ef\u8bfb\u7684\u540d\u79f0\u3002</p>"},{"location":"zh/Update-parsing/#_3","title":"\u6df1\u5ea6\u94fe\u63a5","text":"<p>\u8003\u8651\u5230\u4e0a\u8ff0\u4fe1\u606f\uff0c\u5982\u679c\u60a8\u671f\u671b\u5728\u542f\u52a8\u547d\u4ee4\u4e2d\u4f7f\u7528\u6df1\u5ea6\u94fe\u63a5\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6355\u83b7\u5b83\uff1a</p> <pre><code>@CommandHandler([\"/start\"])\nsuspend fun start(@ParamMapping(\"param_1\") deeplink: String?, user: User, bot: TelegramBot) {\n    message { \"\u6df1\u5ea6\u94fe\u63a5\u662f $deeplink\" }.send(to = user, via = bot)\n}\n</code></pre>"},{"location":"zh/Update-parsing/#_4","title":"\u7fa4\u7ec4\u547d\u4ee4","text":"<p>\u5728 <code>commandParsing</code> \u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u6709\u53c2\u6570 <code>useIdentifierInGroupCommands</code>\uff0c\u5f53\u5b83\u5f00\u542f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u5339\u914d\u8fc7\u7a0b\u4e2d\u4f7f\u7528 <code>TelegramBot.identifier</code>\uff08\u5982\u679c\u60a8\u4f7f\u7528\u4e86\u63cf\u8ff0\u7684\u53c2\u6570\uff0c\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u66f4\u6539\u5b83\uff09\uff0c\u8fd9\u6709\u52a9\u4e8e\u5728\u591a\u4e2a\u673a\u5668\u4eba\u4e4b\u95f4\u533a\u5206\u76f8\u4f3c\u7684\u547d\u4ee4\uff0c\u5426\u5219 <code>@MyBot</code> \u90e8\u5206\u5c06\u88ab\u8df3\u8fc7\u3002</p>"},{"location":"zh/Update-parsing/#_5","title":"\u53e6\u8bf7\u53c2\u89c1","text":"<ul> <li>\u6d3b\u52a8\u8c03\u7528</li> <li>\u6d3b\u52a8\u4e0e\u5904\u7406\u5668</li> <li>\u52a8\u4f5c</li> </ul>"},{"location":"zh/Useful-utilities-and-tips/","title":"\u6709\u7528\u7684\u5de5\u5177\u548c\u63d0\u793a","text":""},{"location":"zh/Useful-utilities-and-tips/#processedupdate","title":"\u64cd\u4f5c ProcessedUpdate","text":"<p><code>ProcessedUpdate</code> \u662f\u4e00\u4e2a\u901a\u7528\u7c7b\uff0c\u7528\u4e8e\u66f4\u65b0\uff0c\u6839\u636e\u539f\u59cb\u6570\u636e\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u540c\u7c7b\u578b\uff08<code>MessageUpdate</code>\u3001<code>CallbackQueryUpdate</code> \u7b49\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u4f20\u5165\u6570\u636e\u7684\u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u667a\u80fd\u7c7b\u578b\u8f6c\u6362\u8fdb\u4e00\u6b65\u64cd\u4f5c\u67d0\u4e9b\u6570\u636e\uff0c\u4f8b\u5982\uff1a</p> <pre><code>// ...\nif (update !is MessageUpdate) {\n    message { \"\u53ea\u5141\u8bb8\u6d88\u606f\" }.send(user, bot)\n    return\n}\n// \u8fdb\u4e00\u6b65\u5904\u7406\u65f6\uff0cProcessedUpdate \u5c06\u88ab\u89c6\u4e3a MessageUpdate\u3002\n</code></pre> <p>\u5185\u90e8\u8fd8\u6709\u4e00\u4e2a <code>User Reference</code> \u63a5\u53e3\uff0c\u53ef\u4ee5\u8ba9\u60a8\u786e\u5b9a\u662f\u5426\u5b58\u5728\u7528\u6237\u5f15\u7528\uff0c\u793a\u4f8b\u7528\u4f8b\uff1a</p> <pre><code>val user = if(update is UserReference) update.user else null\n</code></pre> <p>\u5982\u679c\u9700\u8981\uff0c\u66f4\u65b0\u53c2\u6570\u4e2d\u59cb\u7ec8\u6709\u539f\u59cb\u7684 <code>update</code>\u3002</p>"},{"location":"zh/Useful-utilities-and-tips/#_1","title":"\u4f9d\u8d56\u6ce8\u5165","text":"<p>\u8be5\u5e93\u4f7f\u7528\u7b80\u5355\u673a\u5236\u6765\u521d\u59cb\u5316\u7c7b\uff0c\u5176\u4e2d\u60a8\u7684\u66f4\u65b0\u5904\u7406\u65b9\u6cd5\u7528\u63d0\u4f9b\u7684\u6ce8\u89e3\u6807\u8bb0\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 <code>ClassManagerImpl</code> \u6765\u8c03\u7528\u6ce8\u89e3\u65b9\u6cd5\u3002</p> <p>\u4f46\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u5176\u4ed6\u5e93\uff0c\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49 <code>ClassManager</code> \u63a5\u53e3\uff0c \u4f7f\u7528\u60a8\u9996\u9009\u7684\u673a\u5236\u5e76\u5728\u521d\u59cb\u5316\u673a\u5668\u4eba\u65f6\u4f20\u9012\u5b83\u3002</p> <pre><code>fun main() = runBlocking {\n    val bot = TelegramBot(\"BOT_TOKEN\", \"com.example.controllers\") {\n        classManager = ClassManagerImpl()\n    }\n\n    bot.handleUpdates()\n}\n</code></pre>"},{"location":"zh/Useful-utilities-and-tips/#_2","title":"\u8fc7\u6ee4\u66f4\u65b0","text":"<p>\u5982\u679c\u6ca1\u6709\u590d\u6742\u6761\u4ef6\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u8fc7\u6ee4\u4e00\u4e9b\u66f4\u65b0\u4ee5\u8fdb\u884c\u5904\u7406\uff1a</p> <pre><code>// \u5b9a\u4e49\u66f4\u65b0\u8fc7\u6ee4\u6761\u4ef6\u7684\u51fd\u6570\nfun filteringFun(update: Update): Boolean = update.message?.text.isNullOrBlank()\n\nfun main() = runBlocking {\n  val bot = TelegramBot(\"BOT_TOKEN\")\n\n  // \u4e3a\u66f4\u65b0\u8bbe\u7f6e\u66f4\u5177\u4f53\u7684\u5904\u7406\u6d41\u7a0b\n  bot.update.setListener {\n    if(filteringFun(it)) return@setListener\n\n    // \u56e0\u6b64\uff0c\u5982\u679c\u76d1\u542c\u5668\u5728\u5230\u8fbe\u5904\u7406\u51fd\u6570\u4e4b\u524d\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u5219\u5b83\u6b63\u5728\u8fc7\u6ee4\u3002\n    // \u5b9e\u9645\u4e0a\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5728\u6b64\u5904\u7f16\u5199 if \u6761\u4ef6\uff0c\u4f7f\u7528 return@setListener \u6216\u5c06\u8fc7\u6ee4\u6269\u5c55\u5230\u5355\u72ec\u7684\u7c7b\u3002\n\n    handle(it) // \u6216\u4f7f\u7528\u5757\u7684\u624b\u52a8\u5904\u7406\u65b9\u5f0f\n  }\n}\n</code></pre> <p>\u8981\u5728\u547d\u4ee4\u5339\u914d\u6216\u6392\u9664\u8fc7\u7a0b\u4e2d\u5305\u542b\u8fc7\u6ee4\uff0c\u8bf7\u67e5\u770b\u4fdd\u62a4\u673a\u5236\u6216 <code>@CommonHandler</code>\u3002</p>"},{"location":"zh/Useful-utilities-and-tips/#_3","title":"\u4e3a\u4e0d\u540c\u65b9\u6cd5\u901a\u7528\u5316\u9009\u9879","text":"<p>\u5982\u679c\u60a8\u9700\u8981\u7ecf\u5e38\u5e94\u7528\u76f8\u540c\u7684\u53ef\u9009\u53c2\u6570\uff0c\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u9002\u5408\u60a8\u7684\u7c7b\u4f3c\u51fd\u6570\uff0c\u4ee5\u51cf\u8f7b\u6837\u677f\u4ee3\u7801\u7684\u8d1f\u62c5 :)</p> <p>\u4e00\u4e9b\u5e38\u89c1\u5c5e\u6027\u88ab\u5206\u79bb\u5230 \u4e0d\u540c\u63a5\u53e3\u3002</p> <pre><code>@Suppress(\"NOTHING_TO_INLINE\")\ninline fun &lt;T, R, O&gt; T.markdownMode(crossinline block: O.() -&gt; Unit = {}): T\n        where               T : TgAction&lt;R&gt;,\n                            T : OptionsFeature&lt;T, O&gt;,\n                            O : Options,\n                            O : OptionsParseMode =\n    options {\n        parseMode = ParseMode.Markdown\n        block()\n    }\n\n\n// ... \u5728\u60a8\u7684\u4ee3\u7801\u4e2d\n\nmessage { \"test\" }.markdownMode().send(to, via)\n</code></pre>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/","title":"Web \u542f\u52a8\u5668\uff08Spring \u548c Ktor\uff09","text":""},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#spring","title":"Spring \u542f\u52a8\u5668","text":"<p>Spring \u542f\u52a8\u5668\u6a21\u5757\u662f\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u6a21\u5757\uff0c\u5c06 Telegram \u673a\u5668\u4eba\u529f\u80fd\u96c6\u6210\u5230 Spring Boot \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u5b83\u5229\u7528 Spring Boot \u7684\u4f9d\u8d56\u6ce8\u5165\u548c\u914d\u7f6e\u5c5e\u6027\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u6839\u636e\u63d0\u4f9b\u7684\u914d\u7f6e\u81ea\u52a8\u914d\u7f6e Telegram \u673a\u5668\u4eba\u3002\u8be5\u5e93\u5bf9\u4e8e\u5e0c\u671b\u4f7f\u7528 Kotlin \u548c Spring Boot \u6784\u5efa Telegram \u673a\u5668\u4eba\u7684\u5f00\u53d1\u8005\u7279\u522b\u6709\u7528\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5316\u7684\u673a\u5668\u4eba\u5f00\u53d1\u548c\u7ba1\u7406\u65b9\u6cd5\u3002</p>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_1","title":"\u5173\u952e\u7279\u6027","text":"<ul> <li>\u81ea\u52a8\u914d\u7f6e\uff1a\u8be5\u5e93\u6839\u636e\u63d0\u4f9b\u7684\u914d\u7f6e\u5c5e\u6027\u81ea\u52a8\u914d\u7f6e Telegram \u673a\u5668\u4eba\uff0c\u6d88\u9664\u4e86\u624b\u52a8\u8bbe\u7f6e\u7684\u9700\u8981\u3002</li> <li>\u914d\u7f6e\u5c5e\u6027\uff1a\u652f\u6301\u914d\u7f6e\u5c5e\u6027\uff0c\u4fbf\u4e8e\u81ea\u5b9a\u4e49\u673a\u5668\u4eba\u8bbe\u7f6e\uff0c\u4f8b\u5982\u673a\u5668\u4eba\u4ee4\u724c\u3001\u5305\u540d\u79f0\u548c\u6807\u8bc6\u7b26\u3002</li> <li>Spring \u96c6\u6210\uff1a\u4e0e Spring \u751f\u6001\u7cfb\u7edf\u65e0\u7f1d\u96c6\u6210\uff0c\u5229\u7528 Spring \u7684\u4f9d\u8d56\u6ce8\u5165\u548c\u5e94\u7528\u4e0a\u4e0b\u6587\u6765\u7ba1\u7406\u673a\u5668\u4eba\u5b9e\u4f8b\u3002</li> <li>\u534f\u7a0b\u652f\u6301\uff1a\u5229\u7528 Kotlin \u534f\u7a0b\u8fdb\u884c\u5f02\u6b65\u673a\u5668\u4eba\u64cd\u4f5c\uff0c\u786e\u4fdd\u9ad8\u6548\u548c\u975e\u963b\u585e\u7684\u6267\u884c\u3002</li> </ul>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_2","title":"\u5f00\u59cb\u4f7f\u7528","text":"<p>\u8981\u4f7f\u7528 Telegram \u673a\u5668\u4eba\u7684 Spring \u542f\u52a8\u5668\u5e93\uff0c\u60a8\u9700\u8981\u5c06\u5176\u4f5c\u4e3a\u4f9d\u8d56\u9879\u5305\u542b\u5728\u60a8\u7684 Spring Boot \u9879\u76ee\u4e2d\u3002\u8be5\u5e93\u65e8\u5728\u4e0e Spring Boot \u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u9700\u8981 Spring Boot \u6846\u67b6\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002</p>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_3","title":"\u4f9d\u8d56\u9879","text":"<p>\u5c06\u4ee5\u4e0b\u4f9d\u8d56\u9879\u6dfb\u52a0\u5230\u60a8\u7684 <code>build.gradle</code> \u6216 <code>pom.xml</code> \u6587\u4ef6\u4e2d\uff1a</p> <pre><code>dependencies {\n    implementation 'eu.vendeli:spring-starter:&lt;version&gt;'\n}\n</code></pre> <p>\u5c06 <code>&lt;version&gt;</code> \u66ff\u6362\u4e3a\u5e93\u7684\u6700\u65b0\u7248\u672c\u3002</p>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_4","title":"\u914d\u7f6e","text":"<p>\u8be5\u5e93\u4f7f\u7528 Spring Boot \u7684 <code>@ConfigurationProperties</code> \u6765\u7ed1\u5b9a\u914d\u7f6e\u5c5e\u6027\u3002\u60a8\u53ef\u4ee5\u5728 Spring Boot \u5e94\u7528\u7a0b\u5e8f\u7684 <code>application.properties</code> \u6216 <code>application.yml</code> \u6587\u4ef6\u4e2d\u5b9a\u4e49\u60a8\u7684\u673a\u5668\u4eba\u914d\u7f6e\u3002</p> <pre><code>ktgram:\n autoStartPolling: true\n shareHttpClient: true\n bot:\n    - token: YOUR_BOT_TOKEN\n      pckg: com.example.bot\n      identifier: MyBot\n</code></pre>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_5","title":"\u4f7f\u7528","text":"<p>\u4e00\u65e6\u5e93\u88ab\u5305\u542b\u5e76\u914d\u7f6e\uff0c\u5b83\u5c06\u6839\u636e\u63d0\u4f9b\u7684\u914d\u7f6e\u81ea\u52a8\u521b\u5efa\u548c\u914d\u7f6e Telegram \u673a\u5668\u4eba\u5b9e\u4f8b\u3002</p> <p>\u5b83\u8fd8\u652f\u6301\u591a\u4e2a\u673a\u5668\u4eba\u5b9e\u4f8b\uff0c\u8981\u521d\u59cb\u5316\u591a\u4e2a\u5b9e\u4f8b\uff0c\u53ea\u9700\u5728\u673a\u5668\u4eba\u90e8\u5206\u58f0\u660e\u4e3a\u65b0\u6761\u76ee\uff1a</p> <pre><code>ktgram:\n bot:\n    - token: YOUR_BOT_TOKEN\n    - token: SECOND_BOT_TOKEN\n</code></pre>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_6","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<p>\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u914d\u7f6e\uff0c\u4f8b\u5982\u81ea\u5b9a\u4e49\u673a\u5668\u4eba\u884c\u4e3a\u6216\u4e0e\u5176\u4ed6 Spring \u7ec4\u4ef6\u96c6\u6210\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55 <code>BotConfiguration</code> \u7c7b\uff0c\u5e76\u901a\u8fc7\u5176 <code>applyCfg</code> \u65b9\u6cd5\u66f4\u6539\u673a\u5668\u4eba\u914d\u7f6e\uff0c\u60a8\u53ef\u4ee5\u5728 \u8fd9\u91cc \u67e5\u770b\u793a\u4f8b\u3002</p> <p>Tip</p> <p>\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u914d\u7f6e\u6bcf\u4e2a\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\uff0c\u8bf7\u901a\u8fc7\u5176\u6807\u8bc6\u7b26\u533a\u5206\u5b83\u4eec\uff08BotConfiguration \u7c7b\u4e5f\u5177\u6709\u6807\u8bc6\u7b26\uff09\u3002</p>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#ktor","title":"Ktor","text":"<p>\u8be5\u6a21\u5757\u65e8\u5728\u7b80\u5316\u4e3a Telegram \u673a\u5668\u4eba\u521b\u5efa webhook \u670d\u52a1\u5668\u7684\u8fc7\u7a0b\u3002\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u914d\u7f6e\u670d\u52a1\u5668\uff0c\u5305\u62ec SSL/TLS \u8bbe\u7f6e\uff0c\u5e76\u58f0\u660e\u591a\u4e2a\u5177\u6709\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684 Telegram \u673a\u5668\u4eba\u3002\u8bbe\u7f6e\u8fc7\u7a0b\u7075\u6d3b\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u6839\u636e\u7279\u5b9a\u9700\u6c42\u5b9a\u5236\u670d\u52a1\u5668\u3002</p>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_7","title":"\u5b89\u88c5","text":"<p>\u8981\u5b89\u88c5 Ktor \u542f\u52a8\u5668\uff0c\u8bf7\u5c06\u5176\u6dfb\u52a0\u5230\u4e3b\u4f9d\u8d56\u9879\u4e2d\uff1a</p> <pre><code>dependencies {\n    implementation(\"eu.vendeli:ktor-starter:x.y.z\") // \u5728\u8fd9\u91cc\n    // \u5c06 x.y.z \u66f4\u6539\u4e3a\u5f53\u524d\u5e93\u7248\u672c\n}\n</code></pre>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_8","title":"\u5173\u952e\u7ec4\u4ef6","text":"<p><code>serveWebhook</code> \u51fd\u6570</p> <p><code>serveWebhook</code> \u51fd\u6570\u662f\u5e93\u7684\u6838\u5fc3\u3002\u5b83\u8bbe\u7f6e\u5e76\u542f\u52a8 Telegram \u673a\u5668\u4eba\u7684 webhook \u670d\u52a1\u5668\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>wait</code>\uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u670d\u52a1\u5668\u5728\u5173\u95ed\u4e4b\u524d\u662f\u5426\u5e94\u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u505c\u6b62\u3002\u9ed8\u8ba4\u4e3a true\u3002</li> <li><code>serverBuilder</code>\uff1a\u4e00\u4e2a\u914d\u7f6e\u670d\u52a1\u5668\u7684 lambda \u51fd\u6570\u3002\u9ed8\u8ba4\u4e3a\u7a7a lambda\u3002</li> </ul>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_9","title":"\u914d\u7f6e","text":"<ul> <li><code>WEBHOOK_PREFIX</code>\uff1a\u7528\u4e8e webhook \u76d1\u542c\u5668\u8def\u7531\u7684\u5730\u5740\u524d\u7f00\u7684\u53c2\u6570\u3002\uff08\u9ed8\u8ba4\u4e3a \"/\"\uff09</li> </ul>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_10","title":"\u670d\u52a1\u5668\u8bbe\u7f6e","text":"<ul> <li><code>server</code>\uff1a\u4f7f\u7528 EnvConfiguration \u6216 ManualConfiguration \u8bbe\u7f6e\u670d\u52a1\u5668\u914d\u7f6e\u7684\u65b9\u6cd5\u3002</li> <li><code>engine</code>\uff1a\u914d\u7f6e Netty \u5e94\u7528\u7a0b\u5e8f\u5f15\u64ce\u7684\u65b9\u6cd5\u3002</li> <li><code>ktorModule</code>\uff1a\u5c06 Ktor \u6a21\u5757\u6dfb\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002</li> </ul> <p>\u8be5\u5e93\u63d0\u4f9b\u4e86\u5e7f\u6cdb\u7684\u53ef\u914d\u7f6e\u53c2\u6570\u7528\u4e8e\u670d\u52a1\u5668\uff0c\u5305\u62ec\u4e3b\u673a\u3001\u7aef\u53e3\u3001SSL \u8bbe\u7f6e\u7b49\u3002\u5176\u914d\u7f6e\u6709\u4e24\u79cd\u5177\u4f53\u9009\u9879\uff1a</p> <ul> <li><code>EnvConfiguration</code>\uff1a\u4ece\u5e26\u6709 <code>KTGRAM_</code> \u524d\u7f00\u7684\u73af\u5883\u4e2d\u8bfb\u53d6\u914d\u7f6e\u503c\u3002</li> <li><code>ManualConfiguration</code>\uff1a\u5141\u8bb8\u624b\u52a8\u8bbe\u7f6e\u914d\u7f6e\u503c\uff0c\u5728 <code>server {}</code> \u51fd\u6570\u4e2d\u8bbe\u7f6e\u60a8\u7684\u53c2\u6570\u3002</li> </ul> <p>\u53ef\u4ee5\u8bbe\u7f6e \u7684\u53c2\u6570\u5217\u8868\u5305\u62ec\uff1a</p> <ul> <li><code>HOST</code>\uff1a\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u6216 IP \u5730\u5740\u3002</li> <li><code>PORT</code>\uff1a\u670d\u52a1\u5668\u7684\u7aef\u53e3\u53f7\u3002</li> <li><code>SSL_PORT</code>\uff1aSSL/TLS \u8fde\u63a5\u7684\u7aef\u53e3\u53f7\u3002</li> <li><code>PEM_PRIVATE_KEY_PATH</code>\uff1aPEM \u79c1\u94a5\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>PEM_CHAIN_PATH</code>\uff1aPEM \u8bc1\u4e66\u94fe\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>PEM_PRIVATE_KEY</code>\uff1aPEM \u79c1\u94a5\u7684\u5bc6\u7801\uff0c\u4f5c\u4e3a\u5b57\u7b26\u6570\u7ec4\u3002</li> <li><code>KEYSTORE_PATH</code>\uff1aJava KeyStore \u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>KEYSTORE_PASSWORD</code>\uff1aKeyStore \u7684\u5bc6\u7801\u3002</li> <li><code>KEY_ALIAS</code>\uff1aKeyStore \u4e2d\u5bc6\u94a5\u7684\u522b\u540d\u3002</li> <li><code>SSL_ON</code>\uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u662f\u5426\u5e94\u542f\u7528 SSL/TLS\u3002\u9ed8\u8ba4\u4e3a true\u3002</li> </ul> <p>Tip</p> <p>\u5982\u679c\u5b58\u5728 pem \u8bc1\u4e66\uff0c\u6a21\u5757\u5c06\u81ea\u52a8\u5728\u6307\u5b9a\u8def\u5f84\u521b\u5efa jks \u5b58\u50a8\u3002</p>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_11","title":"\u673a\u5668\u4eba\u914d\u7f6e\uff1a","text":"<p>\u8981\u914d\u7f6e\u673a\u5668\u4eba\uff0c\u8bf7\u8c03\u7528 <code>declareBot {}</code>\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u4ee5\u4e0b\u53c2\u6570\uff1a</p> <ul> <li><code>token</code>\uff1a\u673a\u5668\u4eba\u4ee4\u724c\u3002</li> <li><code>pckg</code>\uff1a\u673a\u5668\u4eba\u7684\u5305\u540d\u79f0\u3002</li> <li><code>configuration</code>\uff1a\u7528\u4e8e\u914d\u7f6e\u673a\u5668\u4eba\u7684 lambda \u51fd\u6570\u3002</li> <li><code>handlingBehaviour</code>\uff1a\u7528\u4e8e\u8bbe\u7f6e\u673a\u5668\u4eba\u7684\u5904\u7406\u884c\u4e3a\u7684 lambda \u51fd\u6570\u3002</li> <li><code>onInit</code>\uff1a\u5728\u673a\u5668\u4eba\u521d\u59cb\u5316\u65f6\u6267\u884c\u7684 lambda \u51fd\u6570\u3002</li> </ul>"},{"location":"zh/Web-starters-%28Spring-and-Ktor%29/#_12","title":"\u793a\u4f8b\u7528\u6cd5","text":"<p>\u8981\u4f7f\u7528\u6b64\u6a21\u5757\uff0c\u8bf7\u8c03\u7528 <code>serveWebhook</code> \u51fd\u6570\uff0c\u4f7f\u7528\u6240\u9700\u7684\u8bbe\u7f6e\u8fdb\u884c\u914d\u7f6e\uff0c\u58f0\u660e\u60a8\u7684\u673a\u5668\u4eba\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5316\u7684\u793a\u4f8b\uff1a</p> <pre><code>fun main() = runBlocking {\n    serveWebhook {\n        server {\n            HOST = \"0.0.0.0\"\n            PORT = 8080\n            SSL_PORT = 8443\n\n            PEM_PRIVATE_KEY_PATH = \"/etc/letsencrypt/live/example.com/privkey.pem\"\n            PEM_CHAIN_PATH = \"/etc/letsencrypt/live/example.com/fullchain.pem\"\n            PEM_PRIVATE_KEY = \"pem_changeit\".toCharArray()\n\n            KEYSTORE_PATH = \"/etc/ssl/certs/java/cacerts/bot_keystore.jks\"\n            KEYSTORE_PASSWORD = \"changeit\".toCharArray()\n            // \u6839\u636e\u9700\u8981\u8bbe\u7f6e\u5176\u4ed6\u914d\u7f6e\u53c2\u6570\n        }\n        declareBot {\n            token = \"YOUR_BOT_TOKEN\"\n            // \u914d\u7f6e\u5176\u4ed6\u673a\u5668\u4eba\u8bbe\u7f6e\n        }\n        // \u5982\u679c\u9700\u8981\uff0c\u6dfb\u52a0\u66f4\u591a\u673a\u5668\u4eba\u6216\u8bbe\u7f6e\u5176\u4ed6\u53c2\u6570\n    }\n}\n</code></pre> <p>Caution</p> <p>\u4e0d\u8981\u5fd8\u8bb0\u8bbe\u7f6e webhook \u4ee5\u4f7f\u4e00\u5207\u6b63\u5e38\u5de5\u4f5c\u3002 :)</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5757\u5c06\u4f5c\u4e3a <code>host/BOT_TOKEN</code> \u63d0\u4f9b webhook \u76d1\u542c\u7aef\u70b9\u3002</p>"}]}